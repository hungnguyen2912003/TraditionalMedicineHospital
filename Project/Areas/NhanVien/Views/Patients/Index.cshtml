@model IEnumerable<Project.Areas.Admin.Models.Entities.Patient>
@{
    ViewData["Title"] = "Danh sách bệnh nhân";
    Layout = "~/Views/Shared/_mainAdminLayout.cshtml";
}

<ul class="flex space-x-2 rtl:space-x-reverse">
    <li>
        <a href="javascript:;" class="text-primary hover:underline">Danh mục bệnh nhân</a>
    </li>
    <li class="before:content-['/'] ltr:before:mr-1 rtl:before:ml-1">
        <span>Danh sách</span>
    </li>
</ul>

<div x-data="list">
    <div class="panel border-[#e0e6ed] px-0 dark:border-[#1b2e4b] mt-3">
        <div class="px-5">
            <div class="text-2xl font-bold mb-6">Danh sách bệnh nhân</div>
            <hr class="mb-6">
            <div class="flex flex-wrap items-center justify-between gap-4 mb-5">
                <div class="flex w-1/2 flex-col gap-4 sm:w-auto sm:flex-row sm:items-center sm:gap-3">
                    <div class="group relative">
                        <input type="text" placeholder="Tìm kiếm..." id="customSearchInput"
                            class="peer form-input ltr:pr-8 rtl:pl-8">
                        <div
                            class="absolute top-1/2 -translate-y-1/2 peer-focus:text-primary ltr:right-[11px] rtl:left-[11px]">
                            <svg width="24" height="24" viewbox="0 0 24 24" fill="none"
                                xmlns="http://www.w3.org/2000/svg" class="h-4 w-4">
                                <circle cx="11.5" cy="11.5" r="9.5" stroke="currentColor" stroke-width="1.5"
                                    opacity="0.5"></circle>
                                <path d="M18.5 18.5L22 22" stroke="currentColor" stroke-width="1.5"
                                    stroke-linecap="round"></path>
                            </svg>
                        </div>
                    </div>
                </div>
            </div>

            <!-- FILTER BAR START -->
            <div class="filter-divider">
                <span>Bộ lọc</span>
            </div>
            <div class="flex flex-col gap-2 w-full mt-4">
                <div class="flex flex-col sm:flex-row gap-5 mb-2 justify-center items-center">
                    <div class="w-56">
                        <select id="filterGender" class="form-input choices w-full mt-1 p-2 border rounded">
                            <option value="">Chọn giới tính</option>
                            @foreach (var g in ViewBag.GenderOptions)
                            {
                                <option value="@g.Value">@g.Text</option>
                            }
                        </select>
                    </div>
                    <div class="w-32">
                        <button id="btnFilter" type="button" class="btn btn-primary w-full">
                            <svg xmlns="http://www.w3.org/2000/svg" class="inline-block mr-2" width="20" height="20"
                                fill="none" viewBox="0 0 24 24">
                                <path d="M4 5h16M6 10h12M9 15h6M10 20h4" stroke="currentColor" stroke-width="2"
                                    stroke-linecap="round" />
                            </svg>
                            Lọc
                        </button>
                    </div>
                    <div class="w-32">
                        <button id="btnResetFilter" type="button" class="btn btn-secondary w-full" disabled
                            style="cursor: not-allowed;">
                            <svg xmlns="http://www.w3.org/2000/svg" class="inline-block mr-2" width="18" height="18"
                                fill="none" viewBox="0 0 24 24">
                                <path d="M6 18L18 6M6 6l12 12" stroke="currentColor" stroke-width="2"
                                    stroke-linecap="round" />
                            </svg>
                            Hủy lọc
                        </button>
                    </div>
                </div>
            </div>
            <!-- FILTER BAR END -->


            <div class="table-responsive">
                <table id="myTable" class="table-striped table-hover"></table>
            </div>
        </div>
    </div>
</div>

<script src="~/Public/assets/js/simple-datatables.js"></script>

<script>

    document.addEventListener('alpine:init', () => {
        Alpine.data('list', () => ({
            entityList: @Html.Raw(Json.Serialize(Model)),
            filteredList: [],
            selectedRows: [],
            datatable: null,

            init() {
                if (!Array.isArray(this.entityList)) {
                    this.entityList = [];
                }
                this.filteredList = [...this.entityList];
                window.list = this;
                this.initializeTable();
            },

            initializeTable() {
                try {
                    const tableData = this.filteredList.map((entity, index) => [
                        index + 1,
                        entity.code,
                        entity.name,
                        getEnumDisplayName('GenderType', entity.gender),
                        entity.emailAddress || 'Không có email',
                        `<div class="flex gap-4">
                            <a href="/benh-nhan/chinh-sua/${entity.id}" class="hover:text-info" x-tooltip="Chỉnh sửa">
                                <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" class="w-4.5 h-4.5">
                                    <path opacity="0.5" d="M22 10.5V12C22 16.714 22 19.0711 20.5355 20.5355C19.0711 22 16.714 22 12 22C7.28595 22 4.92893 22 3.46447 20.5355C2 19.0711 2 16.714 2 12C2 7.28595 2 4.92893 3.46447 3.46447C4.92893 2 7.28595 2 12 2H13.5" stroke="currentColor" stroke-width="1.5" stroke-linecap="round"></path>
                                    <path d="M17.3009 2.80624L16.652 3.45506L10.6872 9.41993C10.2832 9.82394 10.0812 10.0259 9.90743 10.2487C9.70249 10.5114 9.52679 10.7957 9.38344 11.0965C9.26191 11.3515 9.17157 11.6225 8.99089 12.1646L8.41242 13.9L8.03811 15.0229C7.9492 15.2897 8.01862 15.5837 8.21744 15.7826C8.41626 15.9814 8.71035 16.0508 8.97709 15.9619L10.1 15.5876L11.8354 15.0091C12.3775 14.8284 12.6485 14.7381 12.9035 14.6166C13.2043 14.4732 13.4886 14.2975 13.7513 14.0926C13.9741 13.9188 14.1761 13.7168 14.5801 13.3128L20.5449 7.34795L21.1938 6.69914C22.2687 5.62415 22.2687 3.88124 21.1938 2.80624C20.1188 1.73125 18.3759 1.73125 17.3009 2.80624Z" stroke="currentColor" stroke-width="1.5"></path>
                                    <path opacity="0.5" d="M16.6522 3.45508C16.6522 3.45508 16.7333 4.83381 17.9499 6.05034C19.1664 7.26687 20.5451 7.34797 20.5451 7.34797M10.1002 15.5876L8.4126 13.9" stroke="currentColor" stroke-width="1.5"></path>
                                </svg>
                            </a>
                            <a href="/benh-nhan/chi-tiet/${entity.id}" class="hover:text-primary" x-tooltip="Xem chi tiết">
                                <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" class="w-5 h-5">
                                    <path opacity="0.5" d="M3.27489 15.2957C2.42496 14.1915 2 13.6394 2 12C2 10.3606 2.42496 9.80853 3.27489 8.70433C4.97196 6.49956 7.81811 4 12 4C16.1819 4 19.028 6.49956 20.7251 8.70433C21.575 9.80853 22 10.3606 22 12C22 13.6394 21.575 14.1915 20.7251 15.2957C19.028 17.5004 16.1819 20 12 20C7.81811 20 4.97196 17.5004 3.27489 15.2957Z" stroke="currentColor" stroke-width="1.5"></path>
                                    <path d="M15 12C15 13.6569 13.6569 15 12 15C10.3431 15 9 13.6569 9 12C9 10.3431 10.3431 9 12 9C13.6569 9 15 10.3431 15 12Z" stroke="currentColor" stroke-width="1.5"></path>
                                </svg>
                            </a>
                        </div>`
                    ]);

                    this.datatable = new simpleDatatables.DataTable('#myTable', {
                        data: {
                            headings: [
                                'STT',
                                'Mã bệnh nhân',
                                'Họ tên bệnh nhân',
                                'Giới tính',
                                'Email',
                                'Thao tác'
                            ],
                            data: tableData
                        },
                        perPage: 10,
                        perPageSelect: [10, 20, 30, 50, 100],
                        firstLast: true,
                        searchable: false,
                        firstText: '<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" class="w-4.5 h-4.5 rtl:rotate-180"><path d="M13 19L7 12L13 5" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/><path opacity="0.5" d="M16.9998 19L10.9998 12L16.9998 5" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/></svg>',
                        lastText: '<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" class="w-4.5 h-4.5 rtl:rotate-180"><path d="M11 19L17 12L11 5" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/><path opacity="0.5" d="M6.99976 19L12.9998 12L6.99976 5" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/></svg>',
                        prevText: '<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" class="w-4.5 h-4.5 rtl:rotate-180"><path d="M15 5L9 12L15 19" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/></svg>',
                        nextText: '<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" class="w-4.5 h-4.5 rtl:rotate-180"><path d="M9 5L15 12L9 19" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/></svg>',
                        labels: {
                            perPage: "<span class='ml-2'>{select}</span>",
                            noRows: 'Không có dữ liệu'
                        },
                        layout: {
                            top: '{search}',
                            bottom: '{info}{select}{pager}'
                        },
                        columns: [
                            {
                                select: 0,
                                sortable: false,
                                render: (data, cell, row) => {
                                    return data;
                                }
                            },
                            {
                                select: 5,
                                sortable: false,
                                render: (data, cell, row) => {
                                    return data;
                                }
                            }
                        ],
                    });

                    // Gán lại sự kiện cho checkbox và delete-btn
                    this.rebindCheckboxEvents();
                    // Gán lại sự kiện khi chuyển trang
                    this.datatable.on('datatable.page', () => {
                        this.rebindCheckboxEvents();
                    });
                } catch (error) {
                    console.error('Lỗi khởi tạo bảng:', error);
                }
            },

            rebindCheckboxEvents() {
                // Gán lại sự kiện cho nút xóa
                document.querySelectorAll('.delete-btn').forEach(btn => {
                    btn.onclick = function () {
                        const id = this.getAttribute('data-id');
                        if (window.list && typeof window.list.delete === 'function') {
                            window.list.delete(id);
                        }
                    };
                });
            },

            updateTable() {
                if (this.datatable) {
                    this.datatable.destroy();
                    this.datatable = null;
                }
                this.initializeTable();
            }
        }));
    });

    document.getElementById('customSearchInput').addEventListener('input', function () {
        const keyword = removeVietnameseTones(this.value.trim().toLowerCase());
        if (!window.list) return;

        try {
            if (keyword === '') {
                window.list.filteredList = [...window.list.entityList];
            } else {
                window.list.filteredList = window.list.entityList.filter(e =>
                    (e.name && removeVietnameseTones(e.name).includes(keyword)) ||
                    (e.code && removeVietnameseTones(e.code).includes(keyword)) ||
                    (e.emailAddress && removeVietnameseTones(e.emailAddress).includes(keyword))
                );
            }
            window.list.updateTable();
        } catch (error) {
            console.error('Lỗi xử lý tìm kiếm:', error);
        }
    });


    $(document).ready(function () {
        if (!window.genderChoices) {
            window.genderChoices = new Choices('#filterGender', {
                searchEnabled: true,
                itemSelectText: '',
                shouldSort: false,
                placeholder: true,
                placeholderValue: 'Chọn giới tính...'
            });
        }
        updateResetFilterButtonState();

        // Xử lý sự kiện change cho các select
        $('#filterGender').on('change', function () {
            updateResetFilterButtonState();

            // Kiểm tra nếu tất cả các select đều có giá trị mặc định
            const genderValue = $('#filterGender').val();

            if (!genderValue || genderValue === "") {
                // Reset về danh sách ban đầu
                window.list.filteredList = [...window.list.entityList];
                if (window.list.datatable) {
                    window.list.datatable.destroy();
                    window.list.datatable = null;
                }
                window.list.initializeTable();
            }
        });
    });

    // Nút Lọc
    $(document).on('click', '#btnFilter', function () {
        const gender = $('#filterGender').val();

        if (!gender) {
            notyf.error('Vui lòng chọn ít nhất một trường để lọc!');
            return;
        }

        try {
            let filtered = [...window.list.entityList];

            if (gender) {
                filtered = filtered.filter(e => e.gender.toString() === gender);
            }

            // Update filteredList and reinitialize table
            window.list.filteredList = filtered;

            // Destroy existing table if it exists
            if (window.list.datatable) {
                window.list.datatable.destroy();
                window.list.datatable = null;
            }

            // Initialize new table with filtered data
            window.list.initializeTable();

            // Show appropriate message
            if (filtered.length > 0) {
                notyf.success('Lọc thành công!');
            } else {
                notyf.error('Không tìm thấy kết quả phù hợp!');
            }
        } catch (error) {
            console.error('Error in filterList:', error);
            notyf.error('Đã xảy ra lỗi khi lọc dữ liệu!');
        }
    });

    // Nút Hủy lọc
    $(document).on('click', '#btnResetFilter', function () {
        // Reset Choices.js về mặc định cho từng select
        if (window.genderChoices) {
            window.genderChoices.removeActiveItems();
            window.genderChoices.setChoiceByValue('');
        }

        // Reset search input
        $('#customSearchInput').val('');

        // Reset filtered list to original data
        window.list.filteredList = [...window.list.entityList];

        // Destroy existing table if it exists
        if (window.list.datatable) {
            window.list.datatable.destroy();
            window.list.datatable = null;
        }

        // Reinitialize table with original data
        window.list.initializeTable();

        // Update reset button state
        updateResetFilterButtonState();

        // Show success message
        notyf.success('Đã hủy bộ lọc thành công!');
    });

    function updateResetFilterButtonState() {
        const gender = $('#filterGender').val();
        if (!gender) {
            $('#btnResetFilter').prop('disabled', true).css('cursor', 'not-allowed');
        } else {
            $('#btnResetFilter').prop('disabled', false).css('cursor', 'pointer');
        }
    }
</script>

@if (TempData["SuccessMessage"] != null)
{
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            notyf.success('@Html.Raw(TempData["SuccessMessage"])');
        });
    </script>
}
@if (TempData["ErrorMessage"] != null)
{
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            notyf.error('@Html.Raw(TempData["ErrorMessage"])');
        });
    </script>
}
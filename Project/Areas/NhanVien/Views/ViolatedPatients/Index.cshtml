@model List<Project.Areas.NhanVien.Models.ViewModels.ViolatedPatientViewModel>
@{
    ViewData["Title"] = "Danh sách bệnh nhân vi phạm";
    Layout = "~/Views/Shared/_mainAdminLayout.cshtml";
}

<div class="overlay" id="loadingOverlay">
    <span
        class="animate-spin border-8 border-[#f1f2f3] border-l-primary rounded-full w-14 h-14 inline-block align-middle"></span>
</div>

<form id="myForm" method="post">
    @Html.AntiForgeryToken()
    <input type="hidden" name="selectedIds" id="selectedIds" />

    <ul class="flex space-x-2 rtl:space-x-reverse">
        <li>
            <a href="javascript:;" class="text-primary hover:underline">Bệnh nhân vi phạm</a>
        </li>
        <li class="before:content-['/'] ltr:before:mr-1 rtl:before:ml-1">
            <span>Danh sách</span>
        </li>
    </ul>

    <div x-data="list">
        <div class="panel border-[#e0e6ed] px-0 dark:border-[#1b2e4b] mt-3">
            <div class="px-5">
                <div class="text-2xl font-bold mb-6">Danh sách bệnh nhân vi phạm của Khoa:
                    @ViewBag.CurrentDepartmentName</div>
                <hr class="mb-6">
                <div class="flex flex-wrap items-center justify-between gap-4 mb-5">
                    <div class="flex w-full flex-col gap-4 sm:w-auto sm:flex-row sm:items-center sm:gap-3">
                        <div class="group relative">
                            <input type="text" placeholder="Tìm kiếm..." id="customSearchInput"
                                class="peer form-input ltr:pr-8 rtl:pl-8">
                            <div
                                class="absolute top-1/2 -translate-y-1/2 peer-focus:text-primary ltr:right-[11px] rtl:left-[11px]">
                                <svg width="24" height="24" viewbox="0 0 24 24" fill="none"
                                    xmlns="http://www.w3.org/2000/svg" class="h-4 w-4">
                                    <circle cx="11.5" cy="11.5" r="9.5" stroke="currentColor" stroke-width="1.5"
                                        opacity="0.5"></circle>
                                    <path d="M18.5 18.5L22 22" stroke="currentColor" stroke-width="1.5"
                                        stroke-linecap="round"></path>
                                </svg>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- FILTER BAR START -->
                <div class="filter-divider">
                    <span>Bộ lọc</span>
                </div>
                <div class="flex flex-col gap-2 w-full mt-4">
                    <div class="flex flex-col sm:flex-row gap-5 mb-2 justify-center items-center">
                        <div class="w-56">
                            <select id="filterRoom" class="form-input choices w-full mt-1 p-2 border rounded">
                                <option value="">Chọn phòng...</option>
                                @foreach (var room in ViewBag.FilterRooms)
                                {
                                    if (!room.Name.Contains("Hành chính"))
                                    {
                                        <option value="@room.Name">@room.Name</option>
                                    }
                                }
                            </select>
                        </div>
                        <div class="w-32">
                            <button id="btnFilter" type="button" class="btn btn-primary w-full">
                                <svg xmlns="http://www.w3.org/2000/svg" class="inline-block mr-2" width="20" height="20"
                                    fill="none" viewBox="0 0 24 24">
                                    <path d="M4 5h16M6 10h12M9 15h6M10 20h4" stroke="currentColor" stroke-width="2"
                                        stroke-linecap="round" />
                                </svg>
                                Lọc
                            </button>
                        </div>
                        <div class="w-32">
                            <button id="btnResetFilter" type="button" class="btn btn-secondary w-full" disabled
                                style="cursor: not-allowed;">
                                <svg xmlns="http://www.w3.org/2000/svg" class="inline-block mr-2" width="18" height="18"
                                    fill="none" viewBox="0 0 24 24">
                                    <path d="M6 18L18 6M6 6l12 12" stroke="currentColor" stroke-width="2"
                                        stroke-linecap="round" />
                                </svg>
                                Hủy lọc
                            </button>
                        </div>
                    </div>
                </div>
                <!-- FILTER BAR END -->

                <div class="table-responsive">
                    <table id="myTable" class="table-striped table-hover"></table>
                </div>
            </div>
        </div>
    </div>
</form>

<script src="~/Public/assets/js/simple-datatables.js"></script>

<script>
    document.addEventListener('alpine:init', () => {
        Alpine.data('list', () => ({
            entityList: @Html.Raw(Json.Serialize(Model)),
            filteredList: [],
            selectedRows: [],
            datatable: null,

            init() {
                if (!Array.isArray(this.entityList)) {
                    this.entityList = [];
                }
                this.filteredList = [...this.entityList];
                window.list = this;
                this.initializeTable();
            },

            initializeTable() {
                try {
                    const tableData = this.filteredList.map((entity, index) => [
                        index + 1,
                        entity.patientName,
                        entity.roomName || '',
                        entity.employeeName || '',
                        `${new Date(entity.firstAbsenceDate).toLocaleDateString('vi-VN')} - ${new Date(entity.secondAbsenceDate).toLocaleDateString('vi-VN')} - ${new Date(entity.thirdAbsenceDate).toLocaleDateString('vi-VN')}`,
                        entity.isViolated ?
                            `<span class="badge badge-outline-success">Đã xử lý</span>` :
                            `<span class="badge badge-outline-danger">Chưa xử lý</span>`,
                        `<div class="flex gap-2">
                            <button type='button' class='${entity.isViolated ? 'text-success' : 'text-danger'} hover:text-red-800' onclick='handleViolation(${index})' x-tooltip='Gửi thông báo bệnh nhân vi phạm'>
                                <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="none" viewBox="0 0 24 24">
                                    <path d="M12 9v3.75m-9.303 3.376c-.866 1.5.217 3.374 1.948 3.374h14.71c1.73 0 2.813-1.874 1.948-3.374L13.949 3.378c-.866-1.5-3.032-1.5-3.898 0L2.697 16.126zM12 15.75h.007v.008H12v-.008z" stroke="currentColor" stroke-width="1.5"/>
                                </svg>
                            </button>
                        </div>`
                    ]);

                    this.datatable = new simpleDatatables.DataTable('#myTable', {
                        data: {
                            headings: [
                                'STT',
                                'Tên bệnh nhân',
                                'Phòng',
                                'Nhân viên theo dõi',
                                'Chuỗi 3 ngày vắng mặt liên tiếp',
                                'Trạng thái',
                                'Thao tác'
                            ],
                            data: tableData
                        },
                        perPage: 10,
                        perPageSelect: [10, 20, 30, 50, 100],
                        firstLast: true,
                        searchable: false,
                        firstText: '<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" class="w-4.5 h-4.5 rtl:rotate-180"><path d="M13 19L7 12L13 5" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/><path opacity="0.5" d="M16.9998 19L10.9998 12L16.9998 5" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/></svg>',
                        lastText: '<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" class="w-4.5 h-4.5 rtl:rotate-180"><path d="M11 19L17 12L11 5" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/><path opacity="0.5" d="M6.99976 19L12.9998 12L6.99976 5" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/></svg>',
                        prevText: '<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" class="w-4.5 h-4.5 rtl:rotate-180"><path d="M15 5L9 12L15 19" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/></svg>',
                        nextText: '<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" class="w-4.5 h-4.5 rtl:rotate-180"><path d="M9 5L15 12L9 19" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/></svg>',
                        labels: {
                            perPage: "<span class='ml-2'>{select}</span>",
                            noRows: 'Không có dữ liệu'
                        },
                        layout: {
                            top: '{search}',
                            bottom: '{info}{select}{pager}'
                        },
                        columns: [
                            {
                                select: 0,
                                sortable: false,
                                render: (data, cell, row) => {
                                    return data;
                                },
                            },
                            {
                                select: 1,
                                sortable: false,
                                render: (data, cell, row) => {
                                    return data;
                                },
                            },
                            {
                                select: 5,
                                sortable: false,
                                render: (data, cell, row) => {
                                    return data;
                                },
                            },
                            {
                                select: 6,
                                sortable: false,
                                render: (data, cell, row) => {
                                    return data;
                                },
                            }
                        ],
                    });
                } catch (error) {
                    console.error('Lỗi khởi tạo bảng:', error);
                }
            },

            updateTable() {
                if (this.datatable) {
                    this.datatable.destroy();
                    this.datatable = null;
                }
                this.initializeTable();
            }
        }));
    });

    document.getElementById('customSearchInput').addEventListener('input', function () {
        const keyword = removeVietnameseTones(this.value.trim().toLowerCase());
        if (!window.list) return;

        try {
            if (keyword === '') {
                window.list.filteredList = [...window.list.entityList];
            } else {
                window.list.filteredList = window.list.entityList.filter(e =>
                    (e.patientName && removeVietnameseTones(e.patientName).includes(keyword)) ||
                    (e.depName && removeVietnameseTones(e.depName).includes(keyword)) ||
                    (e.roomName && removeVietnameseTones(e.roomName).includes(keyword)) ||
                    (e.employeeName && removeVietnameseTones(e.employeeName).includes(keyword)) ||
                    (e.firstAbsenceDate && removeVietnameseTones(e.firstAbsenceDate).includes(keyword)) ||
                    (e.secondAbsenceDate && removeVietnameseTones(e.secondAbsenceDate).includes(keyword))
                );
            }
            window.list.updateTable();
        } catch (error) {
            console.error('Lỗi xử lý tìm kiếm:', error);
        }
    });

    $(document).ready(function () {
        if (!window.roomChoices) {
            window.roomChoices = new Choices('#filterRoom', {
                searchEnabled: true,
                itemSelectText: '',
                shouldSort: false,
                placeholder: true,
                placeholderValue: 'Chọn phòng...'
            });
        }
        updateResetFilterButtonState();

        // Xử lý sự kiện change cho các select
        $('#filterRoom').on('change', function () {
            updateResetFilterButtonState();

            // Kiểm tra nếu tất cả các select đều có giá trị mặc định
            const roomValue = $('#filterRoom').val();

            if (!roomValue || roomValue === "") {
                // Reset về danh sách ban đầu
                window.list.filteredList = [...window.list.entityList];
                if (window.list.datatable) {
                    window.list.datatable.destroy();
                    window.list.datatable = null;
                }
                window.list.initializeTable();
            }
        });
    });

    // Nút Lọc
    $(document).on('click', '#btnFilter', function () {
        const room = $('#filterRoom').val();

        if (!room) {
            notyf.error('Vui lòng chọn ít nhất một trường để lọc!');
            return;
        }

        try {
            let filtered = [...window.list.entityList];

            if (room) {
                filtered = filtered.filter(e => e.roomName === room);
            }

            // Update filteredList and reinitialize table
            window.list.filteredList = filtered;

            // Destroy existing table if it exists
            if (window.list.datatable) {
                window.list.datatable.destroy();
                window.list.datatable = null;
            }

            // Initialize new table with filtered data
            window.list.initializeTable();

            // Show appropriate message
            if (filtered.length > 0) {
                notyf.success('Lọc thành công!');
            } else {
                notyf.error('Không tìm thấy kết quả phù hợp!');
            }
        } catch (error) {
            console.error('Error in filterList:', error);
            notyf.error('Đã xảy ra lỗi khi lọc dữ liệu!');
        }
    });

    // Nút Hủy lọc
    $(document).on('click', '#btnResetFilter', function () {
        // Reset Choices.js về mặc định cho từng select
        if (window.roomChoices) {
            window.roomChoices.removeActiveItems();
            window.roomChoices.setChoiceByValue('');
        }

        // Reset search input
        $('#customSearchInput').val('');

        // Reset filtered list to original data
        window.list.filteredList = [...window.list.entityList];

        // Destroy existing table if it exists
        if (window.list.datatable) {
            window.list.datatable.destroy();
            window.list.datatable = null;
        }

        // Reinitialize table with original data
        window.list.initializeTable();

        // Update reset button state
        updateResetFilterButtonState();

        // Show success message
        notyf.success('Đã hủy bộ lọc thành công!');
    });

    function updateResetFilterButtonState() {
        const room = $('#filterRoom').val();
        if (!room) {
            $('#btnResetFilter').prop('disabled', true).css('cursor', 'not-allowed');
        } else {
            $('#btnResetFilter').prop('disabled', false).css('cursor', 'pointer');
        }
    }

    function handleViolation(rowIndex) {
        const entity = window.list.filteredList[rowIndex];
        if (!entity) return;
        if (entity.isViolated) {
            notyf.error('Đã gửi thông báo vi phạm. Không thao tác được nữa');
            return;
        }
        fetch('/api/violated-patients/set-violated', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
            },
            body: JSON.stringify({ treatmentRecordId: entity.treatmentRecordId })
        })
            .then(res => res.json())
            .then(data => {
                if (data.success) {
                    notyf.success('Đã gửi thông báo bệnh nhân vi phạm thành công!');
                } else {
                    notyf.error('Có lỗi xảy ra!');
                }
            });
    }
</script>

@if (TempData["SuccessMessage"] != null)
{
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            notyf.success('@Html.Raw(TempData["SuccessMessage"])');
        });
    </script>
}
@if (TempData["ErrorMessage"] != null)
{
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            notyf.error('@Html.Raw(TempData["ErrorMessage"])');
        });
    </script>
}

<style>
    .cursor-not-allowed {
        cursor: not-allowed !important;
    }
</style>

@model List<Project.Areas.NhanVien.Models.ViewModels.WarningPatientViewModel>
@{
    ViewData["Title"] = "Danh sách bệnh nhân bị cảnh báo";
    Layout = "~/Views/Shared/_mainAdminLayout.cshtml";
}

<div class="overlay" id="loadingOverlay">
    <span
        class="animate-spin border-8 border-[#f1f2f3] border-l-primary rounded-full w-14 h-14 inline-block align-middle"></span>
</div>


<form id="myForm" method="post">
    @Html.AntiForgeryToken()
    <input type="hidden" name="selectedIds" id="selectedIds" />

    <ul class="flex space-x-2 rtl:space-x-reverse">
        <li>
            <a href="javascript:;" class="text-primary hover:underline">Bệnh nhân bị cảnh báo</a>
        </li>
        <li class="before:content-['/'] ltr:before:mr-1 rtl:before:ml-1">
            <span>Danh sách</span>
        </li>
    </ul>

    <div x-data="list">
        <div class="panel border-[#e0e6ed] px-0 dark:border-[#1b2e4b] mt-3">
            <div class="px-5">
                <div class="text-2xl font-bold mb-6">Danh sách lịch sử bệnh nhân bị cảnh báo của Khoa:
                    @ViewBag.CurrentDepartmentName</div>
                <hr class="mb-6">
                <div class="flex flex-wrap items-center justify-between gap-4 mb-5">
                    <div class="flex w-full flex-col gap-4 sm:w-auto sm:flex-row sm:items-center sm:gap-3">
                        <div class="group relative">
                            <input type="text" placeholder="Tìm kiếm..." id="customSearchInput"
                                class="peer form-input ltr:pr-8 rtl:pl-8">
                            <div
                                class="absolute top-1/2 -translate-y-1/2 peer-focus:text-primary ltr:right-[11px] rtl:left-[11px]">
                                <svg width="24" height="24" viewbox="0 0 24 24" fill="none"
                                    xmlns="http://www.w3.org/2000/svg" class="h-4 w-4">
                                    <circle cx="11.5" cy="11.5" r="9.5" stroke="currentColor" stroke-width="1.5"
                                        opacity="0.5"></circle>
                                    <path d="M18.5 18.5L22 22" stroke="currentColor" stroke-width="1.5"
                                        stroke-linecap="round"></path>
                                </svg>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- FILTER BAR START -->
                <div class="filter-divider">
                    <span>Bộ lọc</span>
                </div>
                <div class="flex flex-col gap-2 w-full mt-4">
                    <div class="flex flex-col sm:flex-row gap-5 mb-2 justify-center items-center">
                        <div class="w-56">
                            <select id="filterRoom" class="form-input choices w-full mt-1 p-2 border rounded">
                                <option value="">Chọn phòng...</option>
                                @foreach (var room in ViewBag.FilterRooms)
                                {
                                    if (!room.Name.Contains("Hành chính"))
                                    {
                                        <option value="@room.Name">@room.Name</option>
                                    }
                                }
                            </select>
                        </div>
                        <div class="w-32">
                            <button id="btnFilter" type="button" class="btn btn-primary w-full">
                                <svg xmlns="http://www.w3.org/2000/svg" class="inline-block mr-2" width="20" height="20"
                                    fill="none" viewBox="0 0 24 24">
                                    <path d="M4 5h16M6 10h12M9 15h6M10 20h4" stroke="currentColor" stroke-width="2"
                                        stroke-linecap="round" />
                                </svg>
                                Lọc
                            </button>
                        </div>
                        <div class="w-32">
                            <button id="btnResetFilter" type="button" class="btn btn-secondary w-full" disabled
                                style="cursor: not-allowed;">
                                <svg xmlns="http://www.w3.org/2000/svg" class="inline-block mr-2" width="18" height="18"
                                    fill="none" viewBox="0 0 24 24">
                                    <path d="M6 18L18 6M6 6l12 12" stroke="currentColor" stroke-width="2"
                                        stroke-linecap="round" />
                                </svg>
                                Hủy lọc
                            </button>
                        </div>
                    </div>
                </div>
                <!-- FILTER BAR END -->

                <div class="table-responsive">
                    <table id="myTable" class="table-striped table-hover"></table>
                </div>
            </div>
        </div>
    </div>
</form>

<div id="mailModal" class="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-50 hidden">
    <div class="bg-white rounded-lg shadow-lg p-6 w-full relative modal-content-animate" style="max-width:1000px;">
        <button type="button" class="absolute top-2 right-2 text-gray-400 hover:text-gray-600"
            onclick="closeMailModal()">
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
                <path stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"
                    d="M6 18L18 6M6 6l12 12" />
            </svg>
        </button>
        <h3 class="text-lg font-bold mb-4">Gửi thông báo qua email</h3>
        <div id="mailModalContent">
        </div>
        <div class="mt-4 flex justify-end gap-2">
            <button type="button" class="btn btn-primary" id="btnSendMail">Gửi</button>
            <button type="button" class="btn btn-secondary" onclick="closeMailModal()">Đóng</button>
        </div>
    </div>
</div>

<div id="smsModal" class="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-50 hidden">
    <div class="bg-white rounded-lg shadow-lg p-6 w-full max-w-2xl relative modal-content-animate"
        style="max-width:1000px;">
        <button type="button" class="absolute top-2 right-2 text-gray-400 hover:text-gray-600"
            onclick="closeSmsModal()">
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
                <path stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"
                    d="M6 18L18 6M6 6l12 12" />
            </svg>
        </button>
        <h3 class="text-lg font-bold mb-4">Gửi tin nhắn SMS</h3>
        <div id="smsModalContent">
            <!-- Nội dung modal sẽ được cập nhật động -->
        </div>
        <div class="mt-4 flex justify-end gap-2">
            <button type="button" class="btn btn-primary" id="btnSendSms">Gửi</button>
            <button type="button" class="btn btn-secondary" onclick="closeSmsModal()">Đóng</button>
        </div>
    </div>
</div>

<script src="~/Public/assets/js/simple-datatables.js"></script>

<script>
    document.addEventListener('alpine:init', () => {
        Alpine.data('list', () => ({
            entityList: @Html.Raw(Json.Serialize(Model)),
            filteredList: [],
            selectedRows: [],
            datatable: null,

            init() {
                if (!Array.isArray(this.entityList)) {
                    this.entityList = [];
                }
                this.filteredList = [...this.entityList];
                window.list = this;
                this.initializeTable();
            },

            initializeTable() {
                try {
                    const tableData = this.filteredList.map((entity, index) => [
                        index + 1,
                        entity.patientName,
                        entity.roomName || '',
                        entity.employeeName || '',
                        new Date(entity.firstAbsenceDate).toLocaleDateString('vi-VN'),
                        new Date(entity.secondAbsenceDate).toLocaleDateString('vi-VN'),
                        `<div class="flex gap-2">
                            <button type='button' class='${entity.mailSent ? 'text-success' : 'text-warning'} hover:text-blue-800' onclick='openMailModal(${index})' x-tooltip='Gửi thông báo qua email'>
                                <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="none" viewBox="0 0 24 24">
                                    <path d="M2 6.5A2.5 2.5 0 0 1 4.5 4h15A2.5 2.5 0 0 1 22 6.5v11a2.5 2.5 0 0 1-2.5 2.5h-15A2.5 2.5 0 0 1 2 17.5v-11Z" stroke="currentColor" stroke-width="1.5"/>
                                    <path d="M22 6.5 12 13 2 6.5" stroke="currentColor" stroke-width="1.5"/>
                                </svg>
                            </button>
                            <button type='button' class='${entity.smsSent ? 'text-success' : 'text-warning'} hover:text-blue-800' onclick='openSmsModal(${index})' x-tooltip='Gửi thông báo qua SMS'>
                                <svg width="20" height="20" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                                <path fill-rule="evenodd" clip-rule="evenodd" d="M10.4606 1.25H13.5394C15.1427 1.24999 16.3997 1.24999 17.4039 1.34547C18.4274 1.44279 19.2655 1.64457 20.0044 2.09732C20.7781 2.57144 21.4286 3.22194 21.9027 3.99563C22.3554 4.73445 22.5572 5.57256 22.6545 6.59611C22.75 7.60029 22.75 8.85725 22.75 10.4606V11.5278C22.75 12.6691 22.75 13.564 22.7007 14.2868C22.6505 15.0223 22.5468 15.6344 22.3123 16.2004C21.7287 17.6093 20.6093 18.7287 19.2004 19.3123C18.3955 19.6457 17.4786 19.7197 16.2233 19.7413C15.7842 19.7489 15.5061 19.7545 15.2941 19.7779C15.096 19.7999 15.0192 19.832 14.9742 19.8582C14.9268 19.8857 14.8622 19.936 14.7501 20.0898C14.6287 20.2564 14.4916 20.4865 14.2742 20.8539L13.7321 21.7697C12.9585 23.0767 11.0415 23.0767 10.2679 21.7697L9.72579 20.8539C9.50835 20.4865 9.37122 20.2564 9.24985 20.0898C9.13772 19.936 9.07313 19.8857 9.02572 19.8582C8.98078 19.832 8.90399 19.7999 8.70588 19.7779C8.49387 19.7545 8.21575 19.7489 7.77666 19.7413C6.52138 19.7197 5.60454 19.6457 4.79957 19.3123C3.39066 18.7287 2.27128 17.6093 1.68769 16.2004C1.45323 15.6344 1.3495 15.0223 1.29932 14.2868C1.24999 13.564 1.25 12.6691 1.25 11.5278L1.25 10.4606C1.24999 8.85726 1.24999 7.60029 1.34547 6.59611C1.44279 5.57256 1.64457 4.73445 2.09732 3.99563C2.57144 3.22194 3.22194 2.57144 3.99563 2.09732C4.73445 1.64457 5.57256 1.44279 6.59611 1.34547C7.60029 1.24999 8.85726 1.24999 10.4606 1.25ZM6.73809 2.83873C5.82434 2.92561 5.24291 3.09223 4.77938 3.37628C4.20752 3.72672 3.72672 4.20752 3.37628 4.77938C3.09223 5.24291 2.92561 5.82434 2.83873 6.73809C2.75079 7.663 2.75 8.84876 2.75 10.5V11.5C2.75 12.6751 2.75041 13.5189 2.79584 14.1847C2.84081 14.8438 2.92737 15.2736 3.07351 15.6264C3.50486 16.6678 4.33223 17.4951 5.3736 17.9265C5.88923 18.1401 6.54706 18.2199 7.8025 18.2416L7.83432 18.2421C8.23232 18.249 8.58109 18.2549 8.87097 18.287C9.18246 18.3215 9.4871 18.3912 9.77986 18.5615C10.0702 18.7304 10.2795 18.9559 10.4621 19.2063C10.6307 19.4378 10.804 19.7306 11.0004 20.0623L11.5587 21.0057C11.7515 21.3313 12.2485 21.3313 12.4412 21.0057L12.9996 20.0623C13.1959 19.7306 13.3692 19.4378 13.5379 19.2063C13.7204 18.9559 13.9298 18.7304 14.2201 18.5615C14.5129 18.3912 14.8175 18.3215 15.129 18.287C15.4189 18.2549 15.7676 18.249 16.1656 18.2421L16.1975 18.2416C17.4529 18.2199 18.1108 18.1401 18.6264 17.9265C19.6678 17.4951 20.4951 16.6678 20.9265 15.6264C21.0726 15.2736 21.1592 14.8438 21.2042 14.1847C21.2496 13.5189 21.25 12.6751 21.25 11.5V10.5C21.25 8.84876 21.2492 7.663 21.1613 6.73809C21.0744 5.82434 20.9078 5.24291 20.6237 4.77938C20.2733 4.20752 19.7925 3.72672 19.2206 3.37628C18.7571 3.09223 18.1757 2.92561 17.2619 2.83873C16.337 2.75079 15.1512 2.75 13.5 2.75H10.5C8.84876 2.75 7.663 2.75079 6.73809 2.83873ZM7.25 9C7.25 8.58579 7.58579 8.25 8 8.25H16C16.4142 8.25 16.75 8.58579 16.75 9C16.75 9.41421 16.4142 9.75 16 9.75H8C7.58579 9.75 7.25 9.41421 7.25 9ZM7.25 12.5C7.25 12.0858 7.58579 11.75 8 11.75H13.5C13.9142 11.75 14.25 12.0858 14.25 12.5C14.25 12.9142 13.9142 13.25 13.5 13.25H8C7.58579 13.25 7.25 12.9142 7.25 12.5Z" fill="currentColor"/>
                                </svg>
                            </button>
                        </div>`
                    ]);

                    this.datatable = new simpleDatatables.DataTable('#myTable', {
                        data: {
                            headings: [
                                'STT',
                                'Tên bệnh nhân',
                                'Phòng',
                                'Nhân viên theo dõi',
                                'Ngày vắng mặt lần 1',
                                'Ngày vắng mặt lần 2',
                                'Thao tác'
                            ],
                            data: tableData
                        },
                        perPage: 10,
                        perPageSelect: [10, 20, 30, 50, 100],
                        firstLast: true,
                        searchable: false,
                        firstText: '<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" class="w-4.5 h-4.5 rtl:rotate-180"><path d="M13 19L7 12L13 5" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/><path opacity="0.5" d="M16.9998 19L10.9998 12L16.9998 5" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/></svg>',
                        lastText: '<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" class="w-4.5 h-4.5 rtl:rotate-180"><path d="M11 19L17 12L11 5" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/><path opacity="0.5" d="M6.99976 19L12.9998 12L6.99976 5" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/></svg>',
                        prevText: '<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" class="w-4.5 h-4.5 rtl:rotate-180"><path d="M15 5L9 12L15 19" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/></svg>',
                        nextText: '<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" class="w-4.5 h-4.5 rtl:rotate-180"><path d="M9 5L15 12L9 19" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/></svg>',
                        labels: {
                            perPage: "<span class='ml-2'>{select}</span>",
                            noRows: 'Không có dữ liệu'
                        },
                        layout: {
                            top: '{search}',
                            bottom: '{info}{select}{pager}'
                        },
                        columns: [
                            {
                                select: 0,
                                sortable: false,
                                render: (data, cell, row) => {
                                    return data;
                                },
                            },
                            {
                                select: 6,
                                sortable: false,
                                render: (data, cell, row) => {
                                    return data;
                                },
                            }
                        ],
                    });
                } catch (error) {
                    console.error('Lỗi khởi tạo bảng:', error);
                }
            },

            updateTable() {
                if (this.datatable) {
                    this.datatable.destroy();
                    this.datatable = null;
                }
                this.initializeTable();
            }
        }));
    });

    document.getElementById('customSearchInput').addEventListener('input', function () {
        const keyword = removeVietnameseTones(this.value.trim().toLowerCase());
        if (!window.list) return;

        try {
            if (keyword === '') {
                window.list.filteredList = [...window.list.entityList];
            } else {
                window.list.filteredList = window.list.entityList.filter(e =>
                    (e.patientName && removeVietnameseTones(e.patientName).includes(keyword)) ||
                    (e.depName && removeVietnameseTones(e.depName).includes(keyword)) ||
                    (e.roomName && removeVietnameseTones(e.roomName).includes(keyword)) ||
                    (e.employeeName && removeVietnameseTones(e.employeeName).includes(keyword)) ||
                    (e.firstAbsenceDate && removeVietnameseTones(e.firstAbsenceDate).includes(keyword)) ||
                    (e.secondAbsenceDate && removeVietnameseTones(e.secondAbsenceDate).includes(keyword))
                );
            }
            window.list.updateTable();
        } catch (error) {
            console.error('Lỗi xử lý tìm kiếm:', error);
        }
    });

    $(document).ready(function () {
        if (!window.roomChoices) {
            window.roomChoices = new Choices('#filterRoom', {
                searchEnabled: true,
                itemSelectText: '',
                shouldSort: false,
                placeholder: true,
                placeholderValue: 'Chọn phòng...'
            });
        }
        updateResetFilterButtonState();

        // Xử lý sự kiện change cho các select
        $('#filterRoom').on('change', function () {
            updateResetFilterButtonState();

            // Kiểm tra nếu tất cả các select đều có giá trị mặc định
            const roomValue = $('#filterRoom').val();

            if (!roomValue || roomValue === "") {
                // Reset về danh sách ban đầu
                window.list.filteredList = [...window.list.entityList];
                if (window.list.datatable) {
                    window.list.datatable.destroy();
                    window.list.datatable = null;
                }
                window.list.initializeTable();
            }
        });
    });

    // Nút Lọc
    $(document).on('click', '#btnFilter', function () {
        const room = $('#filterRoom').val();

        if (!room) {
            notyf.error('Vui lòng chọn ít nhất một trường để lọc!');
            return;
        }

        try {
            let filtered = [...window.list.entityList];

            if (room) {
                filtered = filtered.filter(e => e.roomName === room);
            }

            // Update filteredList and reinitialize table
            window.list.filteredList = filtered;

            // Destroy existing table if it exists
            if (window.list.datatable) {
                window.list.datatable.destroy();
                window.list.datatable = null;
            }

            // Initialize new table with filtered data
            window.list.initializeTable();

            // Show appropriate message
            if (filtered.length > 0) {
                notyf.success('Lọc thành công!');
            } else {
                notyf.error('Không tìm thấy kết quả phù hợp!');
            }
        } catch (error) {
            console.error('Error in filterList:', error);
            notyf.error('Đã xảy ra lỗi khi lọc dữ liệu!');
        }
    });

    // Nút Hủy lọc
    $(document).on('click', '#btnResetFilter', function () {
        // Reset Choices.js về mặc định cho từng select
        if (window.roomChoices) {
            window.roomChoices.removeActiveItems();
            window.roomChoices.setChoiceByValue('');
        }

        // Reset search input
        $('#customSearchInput').val('');

        // Reset filtered list to original data
        window.list.filteredList = [...window.list.entityList];

        // Destroy existing table if it exists
        if (window.list.datatable) {
            window.list.datatable.destroy();
            window.list.datatable = null;
        }

        // Reinitialize table with original data
        window.list.initializeTable();

        // Update reset button state
        updateResetFilterButtonState();

        // Show success message
        notyf.success('Đã hủy bộ lọc thành công!');
    });

    function updateResetFilterButtonState() {
        const room = $('#filterRoom').val();
        if (!room) {
            $('#btnResetFilter').prop('disabled', true).css('cursor', 'not-allowed');
        } else {
            $('#btnResetFilter').prop('disabled', false).css('cursor', 'pointer');
        }
    }

    let currentMailRowIndex = null;
    let currentMailPatientId = null;
    let currentMailTreatmentRecordDetailId = null;

    function openMailModal(rowIndex) {
        const entity = window.list.filteredList[rowIndex];
        if (!entity) return;
        if (entity.mailSent) {
            notyf.error('Đã gửi mail vào khoảng thời gian cảnh báo này rồi. Không thể thao tác nữa');
            return;
        }
        if (!entity.patientEmail || entity.patientEmail.trim() === "") {
            notyf.error('Bệnh nhân không có email');
            return;
        }
        currentMailRowIndex = rowIndex;
        currentMailPatientId = entity.patientId;
        currentMailTreatmentRecordDetailId = entity.treatmentRecordDetailId;
        $('#mailModal').removeClass('hidden closing');
        const overlay = document.getElementById('loadingOverlay');
        overlay.style.display = 'flex';
        // Gọi API preview
        $.ajax({
            url: `/api/NhanVien/WarningHandles/PreviewMailToPatient`,
            method: 'GET',
            data: {
                patientId: entity.patientId,
                treatmentRecordDetailId: entity.treatmentRecordDetailId,
                firstAbsenceDate: entity.firstAbsenceDate
            },
            success: function (res) {
                overlay.style.display = 'none';
                $('#mailModalContent').html(`
                    <div class="flex gap-4 mb-2">
                        <div class="flex-1"><b>Tên bệnh nhân:</b> <span id="mailPatientName">${res.patientName}</span></div>
                        <div class="flex-1"><b>Email:</b> <span id="mailPatientEmail">${res.patientEmail}</span></div>
                        <div class="flex-1"><b>Mã điều trị:</b> <span id="mailTreatmentRecordDetailCode">${res.treatmentRecordDetailCode}</span></div>
                    </div>
                    <div class="flex gap-4 mb-2">
                        <div class="flex-1"><b>Ngày vắng mặt lần 1:</b> <span id="mailPrevAbsenceDate">${res.prevAbsenceDate}</span></div>
                        <div class="flex-1"><b>Ngày vắng mặt lần 2:</b> <span id="mailLastAbsenceDate">${res.lastAbsenceDate}</span></div>
                    </div>
                    <div class="mb-2"><b>Tiêu đề:</b> <input class="form-input w-full mt-2" id="mailSubject" value="${res.subject}" /></div>
                    <div class="mb-2"><b>Nội dung xem trước:</b>
                        <div class="border p-2 bg-gray-50 mt-2" id="mailBodyPreview"></div>
                    </div>
                `);
                $('#mailBodyPreview').html(res.body);
                $('#mailBody').on('input', function () {
                    $('#mailBodyPreview').html($(this).val());
                });
            },
            error: function (xhr) {
                overlay.style.display = 'none';
                $('#mailModalContent').html('<div class="text-danger">Không lấy được nội dung mail!</div>');
                notyf.error(xhr.responseText || 'Không lấy được nội dung mail!');
            }
        });
    }

    $(document).on('click', '#btnSendMail', function () {
        if (!currentMailPatientId || !currentMailTreatmentRecordDetailId) {
            notyf.error('Thiếu thông tin bệnh nhân!');
            return;
        }
        const subject = $('#mailSubject').val();
        const body = $('#mailBody').val();
        const overlay = document.getElementById('loadingOverlay');
        overlay.style.display = 'flex';
        $('#btnSendMail').prop('disabled', true).text('Đang gửi...');
        $.ajax({
            url: '/api/NhanVien/WarningHandles/SendMailToPatient',
            method: 'POST',
            contentType: 'application/json',
            data: JSON.stringify({
                patientId: currentMailPatientId,
                treatmentRecordDetailId: currentMailTreatmentRecordDetailId,
                firstAbsenceDate: window.list.filteredList[currentMailRowIndex].firstAbsenceDate
            }),
            success: function (res) {
                overlay.style.display = 'none';
                notyf.success('Đã gửi mail thành công!');
                window.list.filteredList[currentMailRowIndex].mailSent = true;
                closeMailModal();
                setTimeout(() => window.location.reload(), 800);
            },
            error: function (xhr) {
                overlay.style.display = 'none';
                notyf.error(xhr.responseText || 'Gửi mail thất bại!');
            },
            complete: function () {
                overlay.style.display = 'none';
                $('#btnSendMail').prop('disabled', false).text('Gửi');
            }
        });
    });

    function closeMailModal() {
        $('#mailModal').addClass('closing');
        setTimeout(function () {
            $('#mailModal').addClass('hidden').removeClass('closing');
        }, 200);
    }

    let currentSmsRowIndex = null;
    let currentSmsPatientId = null;
    let currentSmsTreatmentRecordDetailId = null;

    function openSmsModal(rowIndex) {
        const entity = window.list.filteredList[rowIndex];
        if (!entity) return;
        if (entity.smsSent) {
            notyf.error('Đã gửi SMS vào khoảng thời gian cảnh báo này rồi. Không thể thao tác nữa');
            return;
        }
        if (!entity.patientPhone || entity.patientPhone.trim() === "") {
            notyf.error('Bệnh nhân không có số điện thoại');
            return;
        }
        currentSmsRowIndex = rowIndex;
        currentSmsPatientId = entity.patientId;
        currentSmsTreatmentRecordDetailId = entity.treatmentRecordDetailId;
        $('#smsModal').removeClass('hidden closing');
        const overlay = document.getElementById('loadingOverlay');
        overlay.style.display = 'flex';
        // Gọi API preview
        $.ajax({
            url: `/api/NhanVien/WarningHandles/PreviewSmsToPatient`,
            method: 'GET',
            data: {
                patientId: entity.patientId,
                treatmentRecordDetailId: entity.treatmentRecordDetailId,
                firstAbsenceDate: entity.firstAbsenceDate
            },
            success: function (res) {
                overlay.style.display = 'none';
                $('#smsModalContent').html(`
                    <div class="flex gap-4 mb-2">
                        <div class="flex-1"><b>Tên bệnh nhân:</b> <span id="smsPatientName">${res.patientName}</span></div>
                        <div class="flex-1"><b>Số điện thoại:</b> <span id="smsPatientPhone">${res.patientPhone}</span></div>
                        <div class="flex-1"><b>Mã điều trị:</b> <span id="smsTreatmentRecordDetailCode">${res.treatmentRecordDetailCode}</span></div>
                    </div>
                    <div class="flex gap-4 mb-2">
                        <div class="flex-1"><b>Ngày vắng mặt lần 1:</b> <span id="smsPrevAbsenceDate">${res.prevAbsenceDate}</span></div>
                        <div class="flex-1"><b>Ngày vắng mặt lần 2:</b> <span id="smsLastAbsenceDate">${res.lastAbsenceDate}</span></div>
                    </div>
                    <div class="mb-2"><b>Nội dung tin nhắn:</b>
                        <div class="border p-2 bg-gray-50 mt-2" id="smsMessagePreview">${res.message}</div>
                    </div>
                `);
            },
            error: function (xhr) {
                overlay.style.display = 'none';
                $('#smsModalContent').html('<div class="text-danger">Không lấy được nội dung tin nhắn!</div>');
                notyf.error(xhr.responseText || 'Không lấy được nội dung tin nhắn!');
            }
        });
    }

    $(document).on('click', '#btnSendSms', function () {
        if (!currentSmsPatientId || !currentSmsTreatmentRecordDetailId) {
            notyf.error('Thiếu thông tin bệnh nhân!');
            return;
        }
        const overlay = document.getElementById('loadingOverlay');
        overlay.style.display = 'flex';
        $('#btnSendSms').prop('disabled', true).text('Đang gửi...');
        $.ajax({
            url: '/api/NhanVien/WarningHandles/SendSmsToPatient',
            method: 'POST',
            contentType: 'application/json',
            data: JSON.stringify({
                patientId: currentSmsPatientId,
                treatmentRecordDetailId: currentSmsTreatmentRecordDetailId,
                firstAbsenceDate: window.list.filteredList[currentSmsRowIndex].firstAbsenceDate
            }),
            success: function (res) {
                overlay.style.display = 'none';
                notyf.success('Đã gửi SMS thành công!');
                closeSmsModal();
                setTimeout(() => window.location.reload(), 800);
            },
            error: function (xhr) {
                overlay.style.display = 'none';
                notyf.error(xhr.responseText || 'Gửi SMS thất bại!');
            },
            complete: function () {
                overlay.style.display = 'none';
                $('#btnSendSms').prop('disabled', false).text('Gửi');
            }
        });
    });

    function closeSmsModal() {
        $('#smsModal').addClass('closing');
        setTimeout(function () {
            $('#smsModal').addClass('hidden').removeClass('closing');
        }, 200);
    }
</script>

@if (TempData["SuccessMessage"] != null)
{
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            notyf.success('@Html.Raw(TempData["SuccessMessage"])');
        });
    </script>
}
@if (TempData["ErrorMessage"] != null)
{
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            notyf.error('@Html.Raw(TempData["ErrorMessage"])');
        });
    </script>
}


<style>
    .modal-content-animate {
        animation: modalFadeIn 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    }

    #mailModal.closing .modal-content-animate {
        animation: modalFadeOut 0.2s cubic-bezier(0.4, 0, 0.2, 1);
    }

    #smsModal.closing .modal-content-animate {
        animation: modalFadeOut 0.2s cubic-bezier(0.4, 0, 0.2, 1);
    }

    @@keyframes modalFadeIn {
        from {
            opacity: 0;
            transform: scale(0.95);
        }

        to {
            opacity: 1;
            transform: scale(1);
        }
    }

    @@keyframes modalFadeOut {
        from {
            opacity: 1;
            transform: scale(1);
        }

        to {
            opacity: 0;
            transform: scale(0.95);
        }
    }

    #mailModal {
        background: rgba(30, 41, 59, 0.2);
        backdrop-filter: blur(6px);
        -webkit-backdrop-filter: blur(6px);
    }

    #smsModal {
        background: rgba(30, 41, 59, 0.2);
        backdrop-filter: blur(6px);
        -webkit-backdrop-filter: blur(6px);
    }

    .bg-modal-blur {
        background: rgba(30, 41, 59, 0.2);
        backdrop-filter: blur(6px);
        -webkit-backdrop-filter: blur(6px);
    }

    .cursor-not-allowed {
        cursor: not-allowed !important;
    }
</style>
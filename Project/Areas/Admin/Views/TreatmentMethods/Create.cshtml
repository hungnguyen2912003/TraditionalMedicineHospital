@model Project.Areas.Admin.Models.DTOs.TreatmentMethodDto
@{
    ViewData["Title"] = "Thêm mới phương pháp điều trị";
    Layout = "~/Views/Shared/_mainAdminLayout.cshtml";
}

<div class="overlay" id="loadingOverlay">
    <span class="animate-spin border-8 border-[#f1f2f3] border-l-primary rounded-full w-14 h-14 inline-block align-middle"></span>
</div>

<form id="myForm" method="post" enctype="multipart/form-data" asp-action="Create">
    @Html.AntiForgeryToken()

    <div x-data="addData">
        <ul class="flex space-x-2 rtl:space-x-reverse">
            <li>
                <a href="javascript:;" class="text-primary hover:underline">Phương pháp điều trị</a>
            </li>
            <li class="before:content-['/'] ltr:before:mr-1 rtl:before:ml-1">
                <span>Thêm mới</span>
            </li>
        </ul>
        <div class="pt-5 flex flex-col gap-2.5 xl:flex-row">
            <div class="panel flex-1 px-0 py-6 ltr:lg:mr-6 rtl:lg:ml-6">
                <div class="px-6">
                    <div class="text-lg font-semibold mb-6">Thêm thông tin phương pháp điều trị</div>
                    <div class="flex flex-col lg:flex-row gap-6">
                        <div class="w-full lg:max-w-full p-4 rounded-lg shadow-sm">
                            <div class="flex flex-col sm:flex-row gap-4 mb-4">
                                <div class="w-full sm:w-1/2">
                                    <label for="Code" class="block text-sm font-medium text-gray-700">Mã phương pháp điều trị</label>
                                    <input id="Code" type="text" name="Code" class="form-input w-full mt-1 p-2 border rounded" placeholder="Nhập mã phương pháp điều trị" oninput="this.value = this.value.toUpperCase()" />
                                    @Html.ValidationMessageFor(model => model.Code, "", new { @class = "text-danger" })
                                </div>
                                <div class="w-full sm:w-1/2">
                                    <label for="DepartmentId" class="block text-sm font-medium text-gray-700">Khoa phụ trách</label>
                                    <div class="select-wrapper">
                                        <select id="DepartmentId" name="DepartmentId" class="form-input w-full mt-1 p-2 border rounded">
                                            <option value="">Chọn khoa</option>
                                            @foreach (var dep in ViewBag.Departments)
                                            {
                                                <option value="@dep.Id">@dep.Name</option>
                                            }
                                        </select>
                                    </div>
                                    @Html.ValidationMessageFor(model => model.DepartmentId, "", new { @class = "text-danger" })
                                </div>

                            </div>
                            <div class="flex flex-col sm:flex-row gap-4 mb-4">
                                <div class="w-full sm:w-1/2">
                                    <label for="Name" class="block text-sm font-medium text-gray-700">Tên phương pháp điều trị</label>
                                    <input id="Name" type="text" name="Name" class="form-input w-full mt-1 p-2 border rounded" placeholder="Nhập tên phương pháp điều trị" />
                                    @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                                </div>
                                <div class="w-full sm:w-1/2">
                                    <label for="Cost" class="block text-sm font-medium text-gray-700">Chi phí phương pháp điều trị</label>
                                    <div class="flex items-center">
                                        <input id="Cost" type="text" name="Cost" class="form-input w-full mt-1 p-2 border rounded cost-input" placeholder="Nhập chi phí" />
                                        <span class="ml-2 text-gray-700" style="font-weight: 900">VND</span>
                                    </div>
                                    @Html.ValidationMessageFor(model => model.Cost, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="mt-4">
                                <label for="Description" class="block text-sm font-medium text-gray-700">Mô tả phương pháp điều trị</label>
                                <textarea id="Description" name="Description" class="form-textarea w-full mt-1 p-2 border rounded min-h-[150px]" placeholder="Nhập mô tả phương pháp điều trị..."></textarea>
                                @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    <div class="flex flex-col lg:flex-row gap-6">
                        <div class="w-full lg:max-w-full p-4 rounded-lg shadow-sm">
                            <div class="flex justify-center gap-4 mt-4">
                                <button type="button" @@click="add()" class="btn btn-success py-2 bg-green-600 text-white rounded-lg flex items-center gap-2 hover:bg-green-700 w-40 justify-center">
                                    <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" class="h-5 w-5">
                                        <path d="M3.46447 20.5355C4.92893 22 7.28595 22 12 22C16.714 22 19.0711 22 20.5355 20.5355C22 19.0711 22 16.714 22 12C22 11.6585 22 11.4878 21.9848 11.3142C21.9142 10.5049 21.586 9.71257 21.0637 9.09034C20.9516 8.95687 20.828 8.83317 20.5806 8.58578L15.4142 3.41944C15.1668 3.17206 15.0431 3.04835 14.9097 2.93631C14.2874 2.414 13.4951 2.08581 12.6858 2.01515C12.5122 2 12.3415 2 12 2C7.28595 2 4.92893 2 3.46447 3.46447C2 4.92893 2 7.28595 2 12C2 16.714 2 19.0711 3.46447 20.5355Z" stroke="white" stroke-width="1.5"></path>
                                        <path d="M17 22V21C17 19.1144 17 18.1716 16.4142 17.5858C15.8284 17 14.8856 17 13 17H11C9.11438 17 8.17157 17 7.58579 17.5858C7 18.1716 7 19.1144 7 21V22" stroke="white" stroke-width="1.5"></path>
                                        <path opacity="0.5" d="M7 8H13" stroke="white" stroke-width="1.5" stroke-linecap="round"></path>
                                    </svg>
                                    Thêm mới
                                </button>
                                <button type="button" class="btn btn-secondary py-2 bg-gray-500 text-white rounded-lg flex items-center gap-2 hover:bg-gray-600 w-40 justify-center" @@click="goBack()">
                                    <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" class="h-5 w-5">
                                        <path d="M4 10L3.29289 10.7071L2.58579 10L3.29289 9.29289L4 10ZM21 18C21 18.5523 20.5523 19 20 19C19.4477 19 19 18.5523 19 18L21 18ZM8.29289 15.7071L3.29289 10.7071L4.70711 9.29289L9.70711 14.2929L8.29289 15.7071ZM3.29289 9.29289L8.29289 4.29289L9.70711 5.70711L4.70711 10.7071L3.29289 9.29289ZM4 9L14 9L14 11L4 11L4 9ZM21 16L21 18L19 18L19 16L21 16ZM14 9C17.866 9 21 12.134 21 16L19 16C19 13.2386 16.7614 11 14 11L14 9Z" fill="white" />
                                    </svg>
                                    Trở về
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</form>

<script>
    $.validator.addMethod("customPattern", function(value, element, regex) {
        return this.optional(element) || regex.test(value);
    }, "Giá trị không hợp lệ.");

    document.addEventListener('alpine:init', () => {
        Alpine.data('addData', () => ({

            init() {
                this.setupValidation();
                this.setupCleave();
                this.setupChoices();
            },

            setupChoices() {
                const selectElements = document.querySelectorAll('select.form-input');
                selectElements.forEach(select => {
                    new Choices(select, {
                        searchEnabled: true,
                        searchPlaceholderValue: 'Tìm kiếm...',
                        removeItemButton: true,
                        noResultsText: 'Không tìm thấy kết quả',
                        noChoicesText: 'Không có lựa chọn nào',
                    });
                });
            },

            setupCleave() {
                new Cleave('.cost-input', {
                    numeral: true,
                    numeralThousandsGroupStyle: 'thousand',
                    numeralDecimalScale: 0,
                    numeralPositiveOnly: true,
                    onValueChanged: function(e) {
                        $('#Cost').trigger('change');
                    }
                });
            },

            setupValidation() {
                $.validator.addMethod("numberWithComma", function(value, element) {
                    var cleanValue = value.replace(/,/g, '');
                    return this.optional(element) || !isNaN(cleanValue) && cleanValue >= 0;
                }, "Giá bán phải là số.");

                $.validator.addMethod("minWithComma", function(value, element, param) {
                    var cleanValue = value.replace(/,/g, '');
                    return this.optional(element) || !isNaN(cleanValue) && Number(cleanValue) >= param;
                }, "Giá bán phải lớn hơn 0.");

                $("#myForm").validate({
                    ignore: [],
                    rules: {
                        Code: {
                            required: true,
                            minlength: 4,
                            maxlength: 10,
                            customPattern: /^[A-Za-z][A-Za-z0-9]*$/,
                            remote: {
                                url: "/api/validation/treatment/check-code",
                                type: "GET",
                                data: {
                                    entityType: "treatment",
                                    code: function() { return $("#Code").val(); }
                                }
                            }
                        },
                        DepartmentId: {
                            required: true
                        },
                        Name: {
                            required: true,
                            minlength: 6,
                            maxlength: 20,
                            customPattern: /^[A-Za-zÀ-ỹ][A-Za-zÀ-ỹ0-9 ]*$/,
                            remote: {
                                url: "/api/validation/treatment/check-name",
                                type: "GET",
                                data: {
                                    entityType: "treatment",
                                    name: function() { return $("#Name").val(); }
                                }
                            }
                        },
                        Cost: {
                            required: true,
                            numberWithComma: true,
                            minWithComma: 1
                        }
                    },
                    messages: {
                        Code: {
                            required: "Mã phương pháp điều trị không được bỏ trống.",
                            minlength: "Mã phải có ít nhất 4 ký tự.",
                            maxlength: "Mã không được vượt quá 10 ký tự.",
                            customPattern: "Mã phải bắt đầu bằng chữ cái và chỉ chứa chữ cái hoặc số.",
                            remote: "Mã phương pháp điều trị này đã tồn tại."
                        },
                        DepartmentId: {
                            required: "Khoa phụ trách phương pháp điều trị không được bỏ trống."
                        },
                        Name: {
                            required: "Tên phương pháp điều trị không được bỏ trống.",
                            minlength: "Tên phải có ít nhất 6 ký tự.",
                            maxlength: "Tên không được vượt quá 50 ký tự.",
                            customPattern: "Tên phải bắt đầu bằng chữ cái và chỉ chứa chữ cái, số hoặc khoảng trắng.",
                            remote: "Tên phương pháp điều trị này đã tồn tại."
                        },
                        Cost: {
                            required: "Chi phí không được bỏ trống.",
                            numberWithComma: "Chi phí phải là số.",
                            minWithComma: "Chí phí phải lớn hơn 0."
                        }
                    },
                    errorElement: "div",
                    errorClass: "text-danger",
                    highlight: function (element) {
                        if ($(element).is('select')) {
                            const choicesContainer = $(element).closest('.select-wrapper').find('.choices__inner');
                            choicesContainer.addClass("border-red-500");
                        } else {
                            $(element).addClass("border-red-500");
                        }
                    },
                    unhighlight: function (element) {
                        if ($(element).is('select')) {
                            const choicesContainer = $(element).closest('.select-wrapper').find('.choices__inner');
                            choicesContainer.removeClass("border-red-500");
                        } else {
                            $(element).removeClass("border-red-500");
                        }
                    },
                    errorPlacement: function (error, element) {
                        if (element.attr('id') === 'Cost') {
                            error.insertAfter(element.closest('.flex'));
                        } else if (element.is('select')) {
                            const wrapper = element.closest('.select-wrapper');
                            if (wrapper.length) {
                                error.insertAfter(wrapper);
                            } else {
                                error.insertAfter(element);
                            }
                        } else {
                            error.insertAfter(element);
                        }
                    },
                    onfocusout: function(element) {
                        if ($(element).val() === '' || $(element).val().length > 0) {
                            this.element(element);
                        }
                    },
                    onkeyup: false
                });

                $('select.form-input').on('change', function() {
                    $(this).valid();
                });
            },

            appendFormData(formData) {
                formData.append('Code', $('#Code').val());
                formData.append('Name', $('#Name').val());
                formData.append('DepartmentId', $('#DepartmentId').val());
                formData.append('Cost', $('#Cost').val());
                formData.append('Description', $('#Description').val());
                const token = $('input[name="__RequestVerificationToken"]').val();
                formData.append('__RequestVerificationToken', token);
            },

            handleResponse(response) {
                const overlay = document.getElementById('loadingOverlay');
                if (response.success) {
                    overlay.style.display = 'flex';
                    notyf.success(response.message);
                    setTimeout(() => {
                        window.location.href = '/Admin/TreatmentMethods/';
                    }, 2000);
                } else {
                    overlay.style.display = 'none';
                    notyf.error(response.message);
                    if (response.errors) {
                        response.errors.forEach(error => notyf.error(error));
                    }
                }
            },

            add() {
                if ($("#myForm").valid()) {
                    const overlay = document.getElementById('loadingOverlay');
                    overlay.style.display = 'flex';
                    const form = document.getElementById('myForm');
                    const formData = new FormData(form);
                    fetch('/Admin/TreatmentMethods/Create', {
                        method: 'POST',
                        body: formData
                    })
                    .then(response => response.json())
                    .then(this.handleResponse)
                    .catch(error => {
                        overlay.style.display = 'none';
                        notyf.error("Có lỗi xảy ra khi gửi yêu cầu: " + error);
                    });
                }
                else{
                    notyf.error("Vui lòng kiểm tra lại thông tin nhập.");
                }
            },

            goBack() {
                window.location.href = '/Admin/TreatmentMethods/';
            }
        }));
    });
</script>
@model Project.Areas.Admin.Models.DTOs.MedicineDto

@{
    ViewData["Title"] = "Thêm mới thuốc";
    Layout = "~/Views/Shared/_mainAdminLayout.cshtml";
}

<div class="overlay" id="loadingOverlay">
    <span
        class="animate-spin border-8 border-[#f1f2f3] border-l-primary rounded-full w-14 h-14 inline-block align-middle"></span>
</div>

<form id="myForm" method="post" enctype="multipart/form-data" asp-action="Create">
    @Html.AntiForgeryToken()

    <div x-data="addData">
        <ul class="flex space-x-2 rtl:space-x-reverse">
            <li>
                <a href="javascript:;" class="text-primary hover:underline">Thuốc</a>
            </li>
            <li class="before:content-['/'] ltr:before:mr-1 rtl:before:ml-1">
                <span>Thêm mới</span>
            </li>
        </ul>
        <div class="pt-5 flex flex-col gap-2.5 xl:flex-row">
            <div class="panel flex-1 px-0 py-6 ltr:lg:mr-6 rtl:lg:ml-6">
                <div class="px-6">
                    <div class="text-2xl font-bold mb-6">Thêm thông tin thuốc</div>
                    <hr class="mb-6">
                    <div class="flex flex-col lg:flex-row gap-6">
                        <div class="w-full lg:max-w-full p-4 rounded-lg shadow-sm">
                            <div class="flex flex-col sm:flex-row gap-4 mb-4">
                                <div class="w-full sm:w-1/2">
                                    <label for="Code" class="block text-sm font-medium text-gray-700">Mã thuốc</label>
                                    <input id="Code" type="text" name="Code"
                                        class="form-input w-full mt-1 p-2 border rounded" value="@Model.Code"
                                        readonly />
                                    @Html.ValidationMessageFor(model => model.Code, "", new { @class = "text-danger" })
                                </div>
                                <div class="w-full sm:w-1/2">
                                    <label for="Name" class="block text-sm font-medium text-gray-700">Tên thuốc</label>
                                    <input id="Name" type="text" name="Name"
                                        class="form-input w-full mt-1 p-2 border rounded"
                                        placeholder="Nhập tên thuốc" />
                                    @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                                </div>
                                <div class="w-full sm:w-1/2">
                                    <label for="MedicineCategoryId" class="block text-sm font-medium text-gray-700">Loại
                                        thuốc</label>
                                    <div class="select-wrapper">
                                        <select id="MedicineCategoryId" name="MedicineCategoryId"
                                            class="form-input w-full mt-1 p-2 border rounded">
                                            <option value="">Chọn loại thuốc</option>
                                            @foreach (var category in ViewBag.MedicineCategories)
                                            {
                                                <option value="@category.Id">@category.Name</option>
                                            }
                                        </select>
                                    </div>
                                    @Html.ValidationMessageFor(model => model.MedicineCategoryId, "", new { @class =
                                    "text-danger" })
                                </div>
                            </div>
                            <div class="flex flex-col sm:flex-row gap-4 mb-4">
                                <div class="w-full sm:w-1/2">
                                    <label for="Manufacturer" class="block text-sm font-medium text-gray-700">Nhà sản
                                        xuất</label>
                                    <div class="select-wrapper">
                                        <select id="Manufacturer" name="Manufacturer"
                                            class="form-input w-full mt-1 p-2 border rounded">
                                            <option value="">Chọn nhà sản xuất</option>
                                            @foreach (var m in ViewBag.ManufacturerOptions)
                                            {
                                                <option value="@m.Value">@m.Text</option>
                                            }
                                        </select>
                                        @Html.ValidationMessageFor(model => model.Manufacturer, "", new { @class =
                                        "text-danger" })
                                    </div>
                                </div>
                                <div class="w-full sm:w-1/2">
                                    <label for="ManufacturedDate" class="block text-sm font-medium text-gray-700">Ngày
                                        sản xuất</label>
                                    <input id="ManufacturedDate" type="text" name="ManufacturedDate"
                                        class="form-input w-full mt-1 p-2 border rounded flatpickr"
                                        placeholder="Nhập ngày sản xuất" />
                                    @Html.ValidationMessageFor(model => model.ManufacturedDate, "", new { @class =
                                                                        "text-danger" })
                                </div>
                                <div class="w-full sm:w-1/2">
                                    <label for="ExpiryDate" class="block text-sm font-medium text-gray-700">Ngày hết
                                        hạn</label>
                                    <input id="ExpiryDate" type="text" name="ExpiryDate"
                                        class="form-input w-full mt-1 p-2 border rounded flatpickr"
                                        placeholder="Nhập ngày hết hạn" />
                                    @Html.ValidationMessageFor(model => model.ExpiryDate, "", new { @class =
                                                                        "text-danger" })
                                </div>
                            </div>
                            <hr class="my-6 border-[#e0e6ed] dark:border-[#1b2e4b]">
                            <div>
                                <label for="Description" class="block text-sm font-medium text-gray-700">Mô tả
                                    thuốc</label>
                                <textarea id="Description" name="Description"
                                    class="form-textarea w-full mt-1 p-2 border rounded min-h-[150px]"
                                    placeholder="Nhập mô tả loại thuốc..."></textarea>
                                @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger"
                                                                })
                            </div>
                            <hr class="my-6 border-[#e0e6ed] dark:border-[#1b2e4b]">
                            <div>
                                <label for="ActiveIngredient" class="block text-sm font-medium text-gray-700">Thành phần
                                    thuốc</label>
                                <textarea id="ActiveIngredient" name="ActiveIngredient"
                                    class="form-textarea w-full mt-1 p-2 border rounded min-h-[150px]"
                                    placeholder="Nhập thành phần thuốc..."></textarea>
                                @Html.ValidationMessageFor(model => model.ActiveIngredient, "", new { @class =
                                                                "text-danger" })
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="mt-6 w-full xl:mt-0 xl:w-96">
                <div class="panel mb-5">
                    <div>
                        <label class="block text-sm font-medium text-gray-700 form-label">Hình ảnh thuốc</label>
                        <div class="dropzone flex-1" id="imageDropzone"></div>
                    </div>
                    <div class="mt-4">
                        <label class="block text-sm font-medium text-gray-700">Nhập số lượng tồn kho</label>
                        <input id="StockQuantity" type="number" name="StockQuantity"
                            class="form-input w-full mt-1 p-2 border rounded" placeholder="Nhập số lượng" />
                        @Html.ValidationMessageFor(model => model.StockQuantity, "", new { @class = "text-danger" })
                    </div>
                    <div class="mt-4">
                        <label class="block text-sm font-medium text-gray-700">Nhập đơn vị tồn kho</label>
                        <div class="select-wrapper">
                            <select id="StockUnit" name="StockUnit" class="form-input w-full mt-1 p-2 border rounded">
                                <option value="">Chọn đơn vị</option>
                                @foreach (var unit in ViewBag.StockUnit)
                                {
                                    <option value="@unit.Value">@unit.Text</option>
                                }
                            </select>
                        </div>
                        @Html.ValidationMessageFor(model => model.StockUnit, "", new { @class = "text-danger" })
                    </div>
                    <div class="mt-4">
                        <label for="Price" class="block text-sm font-medium text-gray-700">Giá bán</label>
                        <div class="flex items-center">
                            <input id="Price" type="text" name="Price"
                                class="form-input w-full mt-1 p-2 border rounded price-input"
                                placeholder="Nhập giá bán" />
                            <span class="ml-2 text-gray-700" style="font-weight: 900">VND</span>
                        </div>
                        @Html.ValidationMessageFor(model => model.Price, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="panel">
                    <div class="grid grid-cols-1 gap-4 sm:grid-cols-2 xl:grid-cols-1">
                        <button type="button" @@click="add()"
                            class="btn btn-success py-2 bg-green-600 text-white rounded-lg flex items-center gap-2 hover:bg-green-700">
                            <svg width="24" height="24" viewBox="0 0 24 24" fill="none"
                                xmlns="http://www.w3.org/2000/svg" class="h-5 w-5">
                                <path
                                    d="M3.46447 20.5355C4.92893 22 7.28595 22 12 22C16.714 22 19.0711 22 20.5355 20.5355C22 19.0711 22 16.714 22 12C22 11.6585 22 11.4878 21.9848 11.3142C21.9142 10.5049 21.586 9.71257 21.0637 9.09034C20.9516 8.95687 20.828 8.83317 20.5806 8.58578L15.4142 3.41944C15.1668 3.17206 15.0431 3.04835 14.9097 2.93631C14.2874 2.414 13.4951 2.08581 12.6858 2.01515C12.5122 2 12.3415 2 12 2C7.28595 2 4.92893 2 3.46447 3.46447C2 4.92893 2 7.28595 2 12C2 16.714 2 19.0711 3.46447 20.5355Z"
                                    stroke="white" stroke-width="1.5"></path>
                                <path
                                    d="M17 22V21C17 19.1144 17 18.1716 16.4142 17.5858C15.8284 17 14.8856 17 13 17H11C9.11438 17 8.17157 17 7.58579 17.5858C7 18.1716 7 19.1144 7 21V22"
                                    stroke="white" stroke-width="1.5"></path>
                                <path opacity="0.5" d="M7 8H13" stroke="white" stroke-width="1.5"
                                    stroke-linecap="round"></path>
                            </svg>
                            Thêm mới
                        </button>
                        <button type="button"
                            class="btn btn-secondary w-full py-2 bg-gray-500 text-white rounded-lg flex items-center gap-2 hover:bg-gray-600"
                            @@click = "goBack()" >
                            <svg width="24" height="24" viewBox="0 0 24 24" fill="none"
                                xmlns="http://www.w3.org/2000/svg" class="h-5 w-5">
                                <path
                                    d="M4 10L3.29289 10.7071L2.58579 10L3.29289 9.29289L4 10ZM21 18C21 18.5523 20.5523 19 20 19C19.4477 19 19 18.5523 19 18L21 18ZM8.29289 15.7071L3.29289 10.7071L4.70711 9.29289L9.70711 14.2929L8.29289 15.7071ZM3.29289 9.29289L8.29289 4.29289L9.70711 5.70711L4.70711 10.7071L3.29289 9.29289ZM4 9L14 9L14 11L4 11L4 9ZM21 16L21 18L19 18L19 16L21 16ZM14 9C17.866 9 21 12.134 21 16L19 16C19 13.2386 16.7614 11 14 11L14 9Z"
                                    fill="white" />
                            </svg>
                            Trở về
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</form>

<script>
    Dropzone.autoDiscover = false;

    $.validator.addMethod("customPattern", function (value, element, regex) {
        return this.optional(element) || regex.test(value);
    }, "Giá trị không hợp lệ.");

    document.addEventListener('alpine:init', () => {
        Alpine.data('addData', () => ({
            dropzone: null,

            init() {
                this.setupDropzone();
                this.setupValidation();
                this.setupDateTimePicker();
                this.setupCleave();
                this.setupChoices();
            },

            setupChoices() {
                const selectElements = document.querySelectorAll('select.form-input');
                selectElements.forEach(select => {
                    new Choices(select, {
                        searchEnabled: true,
                        searchPlaceholderValue: 'Tìm kiếm...',
                        removeItemButton: true,
                        noResultsText: 'Không tìm thấy kết quả',
                        noChoicesText: 'Không có lựa chọn nào',
                        itemSelectText: ''
                    });
                });
            },

            setupCleave() {
                new Cleave('.price-input', {
                    numeral: true,
                    numeralThousandsGroupStyle: 'thousand',
                    numeralDecimalScale: 0,
                    numeralPositiveOnly: true,
                    onValueChanged: function (e) {
                        $('#Price').trigger('change');
                    }
                });
            },

            setupDateTimePicker() {
                flatpickr('.flatpickr', {
                    dateFormat: "d/m/Y",
                    allowInput: true
                });
            },

            setupDropzone() {
                const self = this;
                this.dropzone = new Dropzone('#imageDropzone', {
                    url: '/Admin/Medicines/Create',
                    autoProcessQueue: false,
                    maxFiles: 1,
                    acceptedFiles: 'image/*',
                    addRemoveLinks: true,
                    dictDefaultMessage: 'Kéo thả hoặc nhấp để chọn ảnh',
                    paramName: 'ImageFile',
                    init: function () {
                        this.on('addedfile', (file) => {
                            if (this.files.length > 1) {
                                this.removeFile(this.files[0]);
                            }
                        });
                        this.on('sending', (file, xhr, formData) => {
                            self.appendFormData(formData);
                        });
                        this.on('success', (file, response) => {
                            self.handleResponse(response);
                        });
                        this.on('error', (file, errorMessage) => {
                            notyf.error("Có lỗi xảy ra: " + errorMessage);
                        });
                    }
                });
            },

            setupValidation() {
                $.validator.addMethod("numberWithComma", function (value, element) {
                    var cleanValue = value.replace(/,/g, '');
                    return this.optional(element) || !isNaN(cleanValue) && cleanValue >= 0;
                }, "Giá bán phải là số.");

                $.validator.addMethod("minWithComma", function (value, element, param) {
                    var cleanValue = value.replace(/,/g, '');
                    return this.optional(element) || !isNaN(cleanValue) && Number(cleanValue) >= param;
                }, "Giá bán phải lớn hơn 0.");

                $("#myForm").validate({
                    ignore: [],
                    rules: {
                        Name: {
                            required: true,
                            minlength: 6,
                            maxlength: 50,
                            customPattern: /^[A-Za-zÀ-ỹ][A-Za-zÀ-ỹ0-9 ]*$/,
                            remote: {
                                url: "/api/validation/medicine/check",
                                type: "GET",
                                data: {
                                    type: "name",
                                    entityType: "medicine",
                                    value: function () { return $("#Name").val(); }
                                },
                                dataFilter: function (data) {
                                    try {
                                        const response = JSON.parse(data);
                                        if (response.success) {
                                            return response.isUnique === true;
                                        } else {
                                            notyf.error(response.message || "Lỗi khi kiểm tra tên.");
                                            return false;
                                        }
                                    } catch (e) {
                                        notyf.error("Lỗi kết nối server.");
                                        return false;
                                    }
                                }
                            }
                        },
                        MedicineCategoryId: {
                            required: true
                        },
                        Manufacturer: {
                            required: true
                        },
                        ManufacturedDate: {
                            required: true,
                            dateFormat: true
                        },
                        ExpiryDate: {
                            required: true,
                            dateFormat: true,
                            greaterThanManufactured: true
                        },
                        StockQuantity: {
                            required: true,
                            min: 1
                        },
                        StockUnit: {
                            required: true
                        },
                        Price: {
                            required: true,
                            numberWithComma: true,
                            minWithComma: 1
                        },
                        ActiveIngredient: {
                            required: true,
                            minlength: 2,
                            maxlength: 100
                        }
                    },
                    messages: {
                        Name: {
                            required: "Tên thuốc không được bỏ trống.",
                            minlength: "Tên phải có ít nhất 6 ký tự.",
                            maxlength: "Tên không được vượt quá 50 ký tự.",
                            customPattern: "Tên phải bắt đầu bằng chữ cái và chỉ chứa chữ cái, số hoặc khoảng trắng.",
                            remote: "Tên thuốc này đã tồn tại."
                        },
                        MedicineCategoryId: {
                            required: "Vui lòng chọn loại thuốc."
                        },
                        Manufacturer: {
                            required: "Nhà sản xuất không được bỏ trống."
                        },
                        ManufacturedDate: {
                            required: "Ngày sản xuất không được bỏ trống.",
                            dateFormat: "Vui lòng nhập ngày hợp lệ (dd/mm/yyyy)."
                        },
                        ExpiryDate: {
                            required: "Ngày hết hạn không được bỏ trống.",
                            dateFormat: "Vui lòng nhập ngày hợp lệ (dd/mm/yyyy).",
                            greaterThanManufactured: "Ngày hết hạn phải sau ngày sản xuất."
                        },
                        StockQuantity: {
                            required: "Số lượng tồn kho không được bỏ trống.",
                            min: "Số lượng tồn kho phải lớn hơn 0."
                        },
                        StockUnit: {
                            required: "Vui lòng chọn đơn vị."
                        },
                        Price: {
                            required: "Giá bán không được bỏ trống.",
                            numberWithComma: "Giá bán phải là số.",
                            minWithComma: "Giá bán phải lớn hơn 0."
                        },
                        ActiveIngredient: {
                            required: "Thành phần hoạt chất không được bỏ trống.",
                            minlength: "Thành phần hoạt chất phải có ít nhất 2 ký tự.",
                            maxlength: "Thành phần hoạt chất không được vượt quá 100 ký tự."
                        }
                    },
                    errorElement: "div",
                    errorClass: "text-danger",
                    highlight: function (element) {
                        if ($(element).is('select')) {
                            const choicesContainer = $(element).closest('.select-wrapper').find('.choices__inner');
                            choicesContainer.addClass("border-red-500");
                        } else {
                            $(element).addClass("border-red-500");
                        }
                    },
                    unhighlight: function (element) {
                        if ($(element).is('select')) {
                            const choicesContainer = $(element).closest('.select-wrapper').find('.choices__inner');
                            choicesContainer.removeClass("border-red-500");
                        } else {
                            $(element).removeClass("border-red-500");
                        }
                    },
                    errorPlacement: function (error, element) {
                        if (element.attr('id') === 'Price') {
                            error.insertAfter(element.closest('.flex'));
                        } else if (element.is('select')) {
                            const wrapper = element.closest('.select-wrapper');
                            if (wrapper.length) {
                                error.insertAfter(wrapper);
                            } else {
                                error.insertAfter(element);
                            }
                        } else {
                            error.insertAfter(element);
                        }
                    },
                    onfocusout: function (element) {
                        if ($(element).val() === '' || $(element).val().length > 0) {
                            this.element(element);
                        }
                    },
                    onkeyup: false
                });

                $.validator.addMethod("dateFormat", function (value, element) {
                    return this.optional(element) || /^\d{2}\/\d{2}\/\d{4}$/.test(value);
                }, "Vui lòng nhập ngày hợp lệ (dd/mm/yyyy).");

                $.validator.addMethod("greaterThanManufactured", function (value, element) {
                    var manufacturedDate = $('#ManufacturedDate').val();
                    if (!manufacturedDate || !value) return true;
                    var manufactured = new Date(manufacturedDate.split('/').reverse().join('-'));
                    var expiry = new Date(value.split('/').reverse().join('-'));
                    return expiry > manufactured;
                }, "Ngày hết hạn phải sau ngày sản xuất.");

                $('select.form-input').on('change', function () {
                    $(this).valid();
                });
            },

            appendFormData(formData) {
                formData.append('Code', $('#Code').val());
                formData.append('Name', $('#Name').val());
                formData.append('Description', $('#Description').val());
                formData.append('MedicineCategoryId', $('#MedicineCategoryId').val());
                formData.append('StockQuantity', $('#StockQuantity').val());
                formData.append('StockUnit', $('#StockUnit').val());
                formData.append('Price', $('#Price').val());
                formData.append('Manufacturer', $('#Manufacturer').val());
                formData.append('ManufacturedDate', $('#ManufacturedDate').val());
                formData.append('ExpiryDate', $('#ExpiryDate').val());
                formData.append('ActiveIngredient', $('#ActiveIngredient').val());
                const token = $('input[name="__RequestVerificationToken"]').val();
                formData.append('__RequestVerificationToken', token);
            },

            handleResponse(response) {
                const overlay = document.getElementById('loadingOverlay');
                if (response.success) {
                    overlay.style.display = 'flex';
                    notyf.success(response.message);
                    setTimeout(() => {
                        window.location.href = '/Admin/Medicines/';
                    }, 2000);
                } else {
                    overlay.style.display = 'none';
                    notyf.error(response.message);
                    if (response.errors) {
                        response.errors.forEach(error => notyf.error(error));
                    }
                }
            },

            add() {
                if ($("#myForm").valid()) {
                    const expiryDateStr = $('#ExpiryDate').val();
                    const today = new Date();
                    today.setHours(0, 0, 0, 0);

                    const expiryDateParts = expiryDateStr.split('/');
                    const expiryDate = new Date(`${expiryDateParts[2]}-${expiryDateParts[1]}-${expiryDateParts[0]}`);
                    expiryDate.setHours(0, 0, 0, 0);

                    if (expiryDate < today) {
                        $.confirm({
                            title: 'Xác nhận',
                            content: 'Bạn có muốn thêm thuốc đã hết hạn hay không?',
                            icon: 'fa fa-exclamation-triangle',
                            theme: 'modern',
                            type: 'orange',
                            boxWidth: '400px',
                            useBootstrap: false,
                            buttons: {
                                confirm: {
                                    text: 'Có',
                                    btnClass: 'btn-warning',
                                    action: () => {
                                        this.submitForm();
                                    }
                                },
                                cancel: {
                                    text: 'Không',
                                    btnClass: 'btn-red',
                                    action: () => {
                                        notyf.error('Vui lòng chỉnh sửa ngày hết hạn.');
                                    }
                                }
                            }
                        });
                    } else {
                        this.submitForm();
                    }
                } else {
                    notyf.error("Vui lòng kiểm tra lại thông tin đã nhập.");
                }
            },

            submitForm() {
                const overlay = document.getElementById('loadingOverlay');
                overlay.style.display = 'flex';
                if (this.dropzone.files.length > 0) {
                    this.dropzone.processQueue();
                } else {
                    const form = document.getElementById('myForm');
                    const formData = new FormData(form);
                    fetch('/Admin/Medicines/Create', {
                        method: 'POST',
                        body: formData
                    })
                        .then(response => response.json())
                        .then(this.handleResponse)
                        .catch(error => {
                            overlay.style.display = 'none';
                            notyf.error("Có lỗi xảy ra khi gửi yêu cầu: " + error);
                        });
                }
            },

            goBack() {
                window.location.href = '/Admin/Medicines/';
            }
        }));
    });
</script>
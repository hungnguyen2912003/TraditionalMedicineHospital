@model IEnumerable<Project.Areas.Admin.Models.ViewModels.UserViewModel>
@{
    ViewData["Title"] = "Danh sách tài khoản người dùng";
    Layout = "~/Views/Shared/_mainAdminLayout.cshtml";
}

<div class="overlay" id="loadingOverlay">
    <span
        class="animate-spin border-8 border-[#f1f2f3] border-l-primary rounded-full w-14 h-14 inline-block align-middle"></span>
</div>

<form id="myForm" method="post">
    @Html.AntiForgeryToken()
    <input type="hidden" name="selectedIds" id="selectedIds" />

    <ul class="flex space-x-2 rtl:space-x-reverse">
        <li>
            <a href="javascript:;" class="text-primary hover:underline">Tài khoản người dùng</a>
        </li>
        <li class="before:content-['/'] ltr:before:mr-1 rtl:before:ml-1">
            <span>Danh sách</span>
        </li>
    </ul>

    <div x-data="list">
        <div class="panel border-[#e0e6ed] px-0 dark:border-[#1b2e4b] mt-3">
            <div class="px-5">
                <div class="flex justify-between items-center mb-5">
                    <h6 class="text-2xl font-bold">Danh sách tài khoản người dùng</h6>
                </div>
                <hr class="mb-5">
                <div class="flex items-center justify-between gap-4 mb-5">
                    <div class="flex items-center gap-3">
                        <a href="javascript:;" id="btnAddUser" class="btn btn-primary" @@click="openUserModal">
                            <svg width="24" height="24" class="h-5 w-5 ltr:mr-2 rtl:ml-2" viewBox="0 0 24 24"
                                fill="none" xmlns="http://www.w3.org/2000/svg">
                                <g id="SVGRepo_bgCarrier" stroke-width="0"></g>
                                <g id="SVGRepo_tracerCarrier" stroke-linecap="round" stroke-linejoin="round"></g>
                                <g id="SVGRepo_iconCarrier">
                                    <g id="Edit / Add_Plus_Circle">
                                        <path id="Vector"
                                            d="M8 12H12M12 12H16M12 12V16M12 12V8M12 21C7.02944 21 3 16.9706 3 12C3 7.02944 7.02944 3 12 3C16.9706 3 21 7.02944 21 12C21 16.9706 16.9706 21 12 21Z"
                                            stroke="#ffffff" stroke-width="2" stroke-linecap="round"
                                            stroke-linejoin="round"></path>
                                    </g>
                                </g>
                            </svg>
                            Thêm tài khoản admin
                        </a>
                        <div class="group relative">
                            <input type="text" placeholder="Tìm kiếm..." id="customSearchInput"
                                class="peer form-input ltr:pr-8 rtl:pl-8">
                            <div
                                class="absolute top-1/2 -translate-y-1/2 peer-focus:text-primary ltr:right-[11px] rtl:left-[11px]">
                                <svg width="24" height="24" viewbox="0 0 24 24" fill="none"
                                    xmlns="http://www.w3.org/2000/svg" class="h-4 w-4">
                                    <circle cx="11.5" cy="11.5" r="9.5" stroke="currentColor" stroke-width="1.5"
                                        opacity="0.5"></circle>
                                    <path d="M18.5 18.5L22 22" stroke="currentColor" stroke-width="1.5"
                                        stroke-linecap="round"></path>
                                </svg>
                            </div>
                        </div>
                    </div>
                    <div class="flex items-center gap-3">
                        <div class="w-56">
                            <select id="filterRole" class="form-input choices w-full p-2 border rounded">
                                <option value="">Chọn vai trò...</option>
                                @foreach (var role in ViewBag.RoleOptions)
                                {
                                    <option value="@role.Value">@role.Text</option>
                                }
                            </select>
                        </div>
                        <button id="btnFilter" type="button" class="btn btn-primary filter-bar-item">
                            <svg xmlns="http://www.w3.org/2000/svg" class="inline-block mr-2" width="20" height="20"
                                fill="none" viewBox="0 0 24 24">
                                <path d="M4 5h16M6 10h12M9 15h6M10 20h4" stroke="currentColor" stroke-width="2"
                                    stroke-linecap="round" />
                            </svg>
                            Lọc
                        </button>
                        <button id="btnResetFilter" type="button" class="btn btn-secondary filter-bar-item">
                            <svg xmlns="http://www.w3.org/2000/svg" class="inline-block mr-2" width="18" height="18"
                                fill="none" viewBox="0 0 24 24">
                                <path d="M6 18L18 6M6 6l12 12" stroke="currentColor" stroke-width="2"
                                    stroke-linecap="round" />
                            </svg>
                            Hủy lọc
                        </button>
                    </div>
                </div>
                <div class="table-responsive">
                    <table id="myTable" class="table-striped table-hover"></table>
                </div>
            </div>
        </div>
    </div>
</form>

<!-- Create Admin Modal -->
<div id="userModal" class="fixed inset-0 z-50 flex items-center justify-center hidden">
    <div class="bg-white rounded-lg shadow-lg w-full max-w-md p-6 relative modal-content-animate">
        <div class="text-2xl font-bold text-primary text-center mb-4">Thêm mới tài khoản admin</div>
        <form id="createAdminForm">
            @Html.AntiForgeryToken()
            <div class="mb-4">
                <label for="username" class="block font-semibold mb-1">Tên tài khoản</label>
                <input type="text" id="username" name="username" class="form-input w-full" minlength="3" maxlength="20"
                    placeholder="Tên tài khoản" />
            </div>
            <div class="mb-4">
                <label for="password" class="block font-semibold mb-1">Mật khẩu</label>
                <input type="text" id="password" name="password" class="form-input w-full" minlength="6" maxlength="20"
                    placeholder="Mật khẩu" />
            </div>
            <div class="flex justify-end gap-2 mt-4">
                <button type="button" class="btn btn-outline-danger" onclick="closeUserModal()">Hủy</button>
                <button type="submit" class="btn btn-primary">Tạo mới</button>
            </div>
        </form>
    </div>
</div>

<!-- Edit Admin Modal -->
<div id="editUserModal" class="fixed inset-0 z-50 flex items-center justify-center hidden">
    <div class="bg-white rounded-lg shadow-lg w-full max-w-md p-6 relative modal-content-animate">
        <div class="text-2xl font-bold text-primary text-center mb-4">Chỉnh sửa tài khoản</div>
        <form id="editUserForm">
            @Html.AntiForgeryToken()
            <input type="hidden" id="editUserId" name="editUserId" />
            <div class="mb-4">
                <label for="editUsername" class="block font-semibold mb-1">Tên tài khoản</label>
                <input type="text" id="editUsername" name="editUsername" class="form-input w-full bg-gray-100"
                    placeholder="Tên tài khoản" />
            </div>
            <div class="mb-4">
                <label for="editPassword" class="block font-semibold mb-1">Mật khẩu mới</label>
                <input type="text" id="editPassword" name="editPassword" class="form-input w-full" minlength="6"
                    maxlength="20" placeholder="Mật khẩu mới (để trống nếu không đổi)" />
            </div>
            <div class="flex justify-end gap-2 mt-4">
                <button type="button" class="btn btn-outline-danger" onclick="closeEditUserModal()">Hủy</button>
                <button type="submit" class="btn btn-primary">Cập nhật</button>
            </div>
        </form>
    </div>
</div>

<script src="~/Public/assets/js/simple-datatables.js"></script>

<script>
    document.addEventListener('alpine:init', () => {
        Alpine.data('list', () => ({
            entityList: @Html.Raw(Json.Serialize(Model)),
            filteredList: [],
            selectedRows: [],
            datatable: null,

            init() {
                if (!Array.isArray(this.entityList)) {
                    this.entityList = [];
                }
                this.filteredList = [...this.entityList];
                window.list = this;
                this.initializeTable();
            },

            initializeTable() {
                try {
                    const tableData = this.filteredList.map((entity, index) => [
                        index + 1,
                        entity.username,
                        getEnumDisplayName('RoleType', entity.role),
                        entity.patientName ?? entity.employeeName ?? 'Không có',
                        `<div class="flex gap-4">
                            <a href="javascript:;" class="hover:text-info edit-user-btn" x-tooltip="Chỉnh sửa" data-id="${entity.id}">
                                <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" class="w-4.5 h-4.5">
                                    <path opacity="0.5" d="M22 10.5V12C22 16.714 22 19.0711 20.5355 20.5355C19.0711 22 16.714 22 12 22C7.28595 22 4.92893 22 3.46447 20.5355C2 19.0711 2 16.714 2 12C2 7.28595 2 4.92893 3.46447 3.46447C4.92893 2 7.28595 2 12 2H13.5" stroke="currentColor" stroke-width="1.5" stroke-linecap="round"></path>
                                    <path d="M17.3009 2.80624L16.652 3.45506L10.6872 9.41993C10.2832 9.82394 10.0812 10.0259 9.90743 10.2487C9.70249 10.5114 9.52679 10.7957 9.38344 11.0965C9.26191 11.3515 9.17157 11.6225 8.99089 12.1646L8.41242 13.9L8.03811 15.0229C7.9492 15.2897 8.01862 15.5837 8.21744 15.7826C8.41626 15.9814 8.71035 16.0508 8.97709 15.9619L10.1 15.5876L11.8354 15.0091C12.3775 14.8284 12.6485 14.7381 12.9035 14.6166C13.2043 14.4732 13.4886 14.2975 13.7513 14.0926C13.9741 13.9188 14.1761 13.7168 14.5801 13.3128L20.5449 7.34795L21.1938 6.69914C22.2687 5.62415 22.2687 3.88124 21.1938 2.80624C20.1188 1.73125 18.3759 1.73125 17.3009 2.80624Z" stroke="currentColor" stroke-width="1.5"></path>
                                    <path opacity="0.5" d="M16.6522 3.45508C16.6522 3.45508 16.7333 4.83381 17.9499 6.05034C19.1664 7.26687 20.5451 7.34797 20.5451 7.34797M10.1002 15.5876L8.4126 13.9" stroke="currentColor" stroke-width="1.5"></path>
                                </svg>
                            </a>
                            <a href="/nguoi-dung/chi-tiet/${entity.id}" class="hover:text-primary" x-tooltip="Xem chi tiết">
                                <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" class="w-5 h-5">
                                    <path opacity="0.5" d="M3.27489 15.2957C2.42496 14.1915 2 13.6394 2 12C2 10.3606 2.42496 9.80853 3.27489 8.70433C4.97196 6.49956 7.81811 4 12 4C16.1819 4 19.028 6.49956 20.7251 8.70433C21.575 9.80853 22 10.3606 22 12C22 13.6394 21.575 14.1915 20.7251 15.2957C19.028 17.5004 16.1819 20 12 20C7.81811 20 4.97196 17.5004 3.27489 15.2957Z" stroke="currentColor" stroke-width="1.5"></path>
                                    <path d="M15 12C15 13.6569 13.6569 15 12 15C10.3431 15 9 13.6569 9 12C9 10.3431 10.3431 9 12 9C13.6569 9 15 10.3431 15 12Z" stroke="currentColor" stroke-width="1.5"></path>
                                </svg>
                            </a>
                        </div>`
                    ]);
                    this.datatable = new simpleDatatables.DataTable('#myTable', {
                        data: {
                            headings: [
                                'STT',
                                'Tên tài khoản',
                                'Vai trò',
                                'Họ tên',
                                'Thao tác'
                            ],
                            data: tableData
                        },
                        perPage: 10,
                        perPageSelect: [10, 20, 30, 50, 100],
                        firstLast: true,
                        searchable: false,
                        firstText: '<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" class="w-4.5 h-4.5 rtl:rotate-180"><path d="M13 19L7 12L13 5" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/><path opacity="0.5" d="M16.9998 19L10.9998 12L16.9998 5" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/></svg>',
                        lastText: '<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" class="w-4.5 h-4.5 rtl:rotate-180"><path d="M11 19L17 12L11 5" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/><path opacity="0.5" d="M6.99976 19L12.9998 12L6.99976 5" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/></svg>',
                        prevText: '<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" class="w-4.5 h-4.5 rtl:rotate-180"><path d="M15 5L9 12L15 19" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/></svg>',
                        nextText: '<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" class="w-4.5 h-4.5 rtl:rotate-180"><path d="M9 5L15 12L9 19" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/></svg>',
                        labels: {
                            perPage: "<span class='ml-2'>{select}</span>",
                            noRows: 'Không có dữ liệu'
                        },
                        layout: {
                            top: '{search}',
                            bottom: '{info}{select}{pager}'
                        },
                        columns: [
                            {
                                select: 0,
                                sortable: false,
                                render: (data, cell, row) => {
                                    return data;
                                }
                            },
                            {
                                select: 3,
                                sortable: false,
                                render: (data, cell, row) => {
                                    return data;
                                }
                            }
                        ],
                    });
                } catch (error) {
                    console.error('Lỗi khi khởi tạo bảng:', error);
                }
            },

            updateTable() {
                if (this.datatable) {
                    this.datatable.destroy();
                    this.datatable = null;
                }
                this.initializeTable();
            },

            openUserModal() {
                document.getElementById('userModal').classList.remove('hidden');
                document.getElementById('username').value = '';
                document.getElementById('password').value = '';
            }
        }));
    });

    document.getElementById('customSearchInput').addEventListener('input', function () {
        const keyword = removeVietnameseTones(this.value.trim());
        if (window.list) {
            let filtered = window.list.entityList.filter(e =>
                (e.username && removeVietnameseTones(e.username).includes(keyword)) ||
                (e.patientName && removeVietnameseTones(e.patientName).includes(keyword)) ||
                (e.employeeName && removeVietnameseTones(e.employeeName).includes(keyword))
            );
            window.list.filteredList = filtered;
            if (window.list.datatable) window.list.datatable.destroy();
            window.list.initializeTable();
        }
    });

    $(document).ready(function () {
        if (!window.roleChoices) {
            window.roleChoices = new Choices('#filterRole', { searchEnabled: true, itemSelectText: '', shouldSort: false });
        }
        updateResetFilterButtonState();

        $('#filterRole').on('change', function () {
            updateResetFilterButtonState();
            if (!$(this).val()) {
                window.list.filteredList = window.list.entityList;
                if (window.list.datatable) window.list.datatable.destroy();
                window.list.initializeTable();
            }
        });
    });

    // Viết lại hàm filterList
    function filterList() {
        const role = $('#filterRole').val();
        let filtered = window.list.entityList;
        if (role) {
            filtered = filtered.filter(e => String(e.role) === String(role));
        }
        window.list.filteredList = filtered;
        if (window.list.datatable) window.list.datatable.destroy();
        window.list.initializeTable();
        if (filtered.length > 0) notyf.success('Lọc thành công!');
        else if (filtered.length === 0) notyf.error('Không tìm thấy kết quả phù hợp!');
    }

    // Nút Lọc
    $(document).on('click', '#btnFilter', function () {
        const role = $('#filterRole').val();

        if (!role) {
            notyf.error('Cần chọn ít nhất một trường để lọc!');
            window.list.filteredList = window.list.entityList;
            if (window.list.datatable) window.list.datatable.destroy();
            window.list.initializeTable();
            updateResetFilterButtonState();
            return;
        }
        filterList();
    });

    // Nút Hủy lọc
    $(document).on('click', '#btnResetFilter', function () {
        // Reset Choices.js về mặc định cho từng select
        if (window.roleChoices) {
            window.roleChoices.removeActiveItems();
            window.roleChoices.setChoiceByValue('');
        } else {
            $('#filterRole').val('').trigger('change');
        }
        window.list.filteredList = window.list.entityList;
        if (window.list.datatable) window.list.datatable.destroy();
        window.list.initializeTable();
        updateResetFilterButtonState();
    });

    function updateResetFilterButtonState() {
        const role = $('#filterRole').val();
        if (!role) {
            $('#btnResetFilter').prop('disabled', true).css('cursor', 'not-allowed');
        } else {
            $('#btnResetFilter').prop('disabled', false).css('cursor', 'pointer');
        }
    }

    document.getElementById('createAdminForm').addEventListener('submit', async function (e) {
        e.preventDefault();

        const username = document.getElementById('username').value;
        const password = document.getElementById('password').value;
        const overlay = document.getElementById('loadingOverlay');

        overlay.style.display = 'flex';

        // Validate
        if (!username || username.length < 3 || username.length > 20) {
            notyf.error('Tên đăng nhập phải từ 3-20 ký tự');
            return;
        }
        if (!password || password.length < 6 || password.length > 20) {
            notyf.error('Mật khẩu phải từ 6-20 ký tự');
            return;
        }

        // Check if username exists
        const found = window.list.entityList.find(e => e.username === username);
        if (found) {
            notyf.error('Tên đăng nhập đã tồn tại');
            overlay.style.display = 'none';
            return;
        }

        try {
            const response = await fetch('/api/User/Create', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                },
                body: JSON.stringify({
                    username: username.trim().toLowerCase(),
                    password: password.trim().toLowerCase()
                })
            });

            const result = await response.json();

            if (response.ok && result.success) {
                overlay.style.display = 'none';
                notyf.success(result.message || 'Tạo tài khoản thành công!');
                // Đóng modal
                setTimeout(() => closeUserModal(), 1000);
                // Reload lại trang hoặc bảng
                setTimeout(() => window.location.reload(), 1000);
            } else {
                overlay.style.display = 'none';
                notyf.error(result.message || 'Tạo tài khoản thất bại!');
            }
        } catch (error) {
            overlay.style.display = 'none';
            notyf.error('Có lỗi xảy ra khi tạo tài khoản: ' + error.message);
        }
    });


    function closeUserModal() {
        const modal = document.getElementById('userModal');
        modal.classList.add('closing');
        setTimeout(function () {
            modal.classList.add('hidden');
            modal.classList.remove('closing');
        }, 200);
    }

    function openEditUserModal(username) {
        document.getElementById('editUserModal').classList.remove('hidden');
        document.getElementById('editUsername').value = username;
        document.getElementById('editPassword').value = '';
    }
    function closeEditUserModal() {
        document.getElementById('editUserModal').classList.add('hidden');
    }
    // Gán sự kiện cho nút chỉnh sửa trên bảng
    $(document).on('click', '.edit-user-btn', function () {
        const id = $(this).data('id');
        // Gọi API lấy thông tin user
        fetch(`/api/User/GetById/${id}`)
            .then(res => res.json())
            .then(data => {
                $('#editUserId').val(id); // Lưu id vào hidden input
                $('#editUsername').val(data.username || '');
                $('#editPassword').val('');
            });
        $('#editUserModal').removeClass('hidden');
    });
    // Submit form đổi mật khẩu
    $('#editUserForm').off('submit').on('submit', async function (e) {
        e.preventDefault();
        const id = $('#editUserId').val();
        const username = $('#editUsername').val();
        const password = $('#editPassword').val();
        const overlay = document.getElementById('loadingOverlay');

        overlay.style.display = 'flex';

        // Chỉ validate password nếu có nhập
        if (password && (password.length < 6 || password.length > 20)) {
            notyf.error('Mật khẩu phải từ 6-20 ký tự');
            overlay.style.display = 'none';
            return;
        }

        try {
            const data = { id, username };
            if (password) {
                data.password = password;
            }
            const res = await fetch(`/api/User/Update/${id}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                },
                body: JSON.stringify(data)
            });
            const result = await res.json();
            if (res.ok && result.success) {
                overlay.style.display = 'none';
                notyf.success(result.message || 'Cập nhật tài khoản thành công!');
                setTimeout(() => {
                    closeEditUserModal();
                    window.location.reload();
                }, 1000);
            } else {
                overlay.style.display = 'none';
                notyf.error(result.message || 'Cập nhật tài khoản thất bại!');
                // Không reload trang nếu lỗi
            }
        } catch (err) {
            overlay.style.display = 'none';
            notyf.error('Lỗi kết nối API!');
        }
    });
</script>

@if (TempData["SuccessMessage"] != null)
{
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            notyf.success('@Html.Raw(TempData["SuccessMessage"])');
        });
    </script>
}
@if (TempData["ErrorMessage"] != null)
{
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            notyf.error('@Html.Raw(TempData["ErrorMessage"])');
        });
    </script>
}


<style>
    .modal-content-animate {
        animation: modalFadeIn 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    }

    #userModal.closing .modal-content-animate {
        animation: modalFadeOut 0.2s cubic-bezier(0.4, 0, 0.2, 1);
    }

    #editUserModal.closing .modal-content-animate {
        animation: modalFadeOut 0.2s cubic-bezier(0.4, 0, 0.2, 1);
    }

    @@keyframes modalFadeIn {
        from {
            opacity: 0;
            transform: scale(0.95);
        }

        to {
            opacity: 1;
            transform: scale(1);
        }
    }

    @@keyframes modalFadeOut {
        from {
            opacity: 1;
            transform: scale(1);
        }

        to {
            opacity: 0;
            transform: scale(0.95);
        }
    }

    #userModal {
        background: rgba(30, 41, 59, 0.2);
        backdrop-filter: blur(6px);
        -webkit-backdrop-filter: blur(6px);
    }

    #editUserModal {
        background: rgba(30, 41, 59, 0.2);
        backdrop-filter: blur(6px);
        -webkit-backdrop-filter: blur(6px);
    }

    .bg-modal-blur {
        background: rgba(30, 41, 59, 0.2);
        backdrop-filter: blur(6px);
        -webkit-backdrop-filter: blur(6px);
    }
</style>
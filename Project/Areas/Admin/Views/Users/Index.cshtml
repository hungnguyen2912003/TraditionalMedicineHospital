@model IEnumerable<Project.Areas.Admin.Models.ViewModels.UserViewModel>
@{
    ViewData["Title"] = "Danh sách tài khoản người dùng";
    Layout = "~/Views/Shared/_mainAdminLayout.cshtml";
}

<form id="indexForm" method="post" asp-action="MoveToTrash">
    @Html.AntiForgeryToken()
    <input type="hidden" name="selectedIds" id="selectedIds" />


    <ul class="flex space-x-2 rtl:space-x-reverse">
        <li>
            <a href="javascript:;" class="text-primary hover:underline">Tài khoản người dùng</a>
        </li>
        <li class="before:content-['/'] ltr:before:mr-1 rtl:before:ml-1">
            <span>Danh sách</span>
        </li>
    </ul>

    <div x-data="list">
        <div class="panel border-[#e0e6ed] px-0 dark:border-[#1b2e4b] mt-3">
            <div class="px-5">
                <h6 class="text-2xl font-bold mb-5">Danh sách tài khoản người dùng</h6>
                <hr class="mb-5">
                <div class="flex items-center justify-between gap-4 mb-5">
                    <div class="flex items-center gap-3">
                        <div class="group relative">
                            <input type="text" placeholder="Tìm kiếm..." id="customSearchInput"
                                class="peer form-input ltr:pr-8 rtl:pl-8">
                            <div
                                class="absolute top-1/2 -translate-y-1/2 peer-focus:text-primary ltr:right-[11px] rtl:left-[11px]">
                                <svg width="24" height="24" viewbox="0 0 24 24" fill="none"
                                    xmlns="http://www.w3.org/2000/svg" class="h-4 w-4">
                                    <circle cx="11.5" cy="11.5" r="9.5" stroke="currentColor" stroke-width="1.5"
                                        opacity="0.5"></circle>
                                    <path d="M18.5 18.5L22 22" stroke="currentColor" stroke-width="1.5"
                                        stroke-linecap="round"></path>
                                </svg>
                            </div>
                        </div>
                    </div>
                    <div class="flex items-center gap-3">
                        <div class="w-56">
                            <select id="filterRole" class="form-input choices w-full p-2 border rounded">
                                <option value="">Chọn vai trò...</option>
                                @foreach (var role in ViewBag.RoleOptions)
                                {
                                    <option value="@role.Value">@role.Text</option>
                                }
                            </select>
                        </div>
                        <button id="btnFilter" type="button" class="btn btn-primary filter-bar-item">
                            <svg xmlns="http://www.w3.org/2000/svg" class="inline-block mr-2" width="20" height="20"
                                fill="none" viewBox="0 0 24 24">
                                <path d="M4 5h16M6 10h12M9 15h6M10 20h4" stroke="currentColor" stroke-width="2"
                                    stroke-linecap="round" />
                            </svg>
                            Lọc
                        </button>
                        <button id="btnResetFilter" type="button" class="btn btn-secondary filter-bar-item">
                            <svg xmlns="http://www.w3.org/2000/svg" class="inline-block mr-2" width="18" height="18"
                                fill="none" viewBox="0 0 24 24">
                                <path d="M6 18L18 6M6 6l12 12" stroke="currentColor" stroke-width="2"
                                    stroke-linecap="round" />
                            </svg>
                            Hủy lọc
                        </button>
                    </div>
                </div>
                <div class="table-responsive">
                    <table id="myTable" class="table-striped table-hover"></table>
                </div>
            </div>
        </div>
    </div>
</form>

<script src="~/Public/assets/js/simple-datatables.js"></script>

<script>
    document.addEventListener('alpine:init', () => {
        Alpine.data('list', () => ({
            entityList: @Html.Raw(Json.Serialize(Model)),
            filteredList: [],
            selectedRows: [],
            datatable: null,

            init() {
                if (!Array.isArray(this.entityList)) {
                    this.entityList = [];
                }
                this.filteredList = [...this.entityList];
                window.list = this;
                this.initializeTable();
            },

            initializeTable() {
                const tableData = this.filteredList.map((entity, index) => [
                    index + 1,
                    entity.username,
                    getEnumDisplayName('RoleType', entity.role),
                    entity.patientName ?? entity.employeeName ?? 'Không có',
                    `<div class="flex gap-4">
                        <a href="/nguoi-dung/chi-tiet/${entity.id}" class="hover:text-primary" x-tooltip="Xem chi tiết">
                            <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" class="w-5 h-5">
                                <path opacity="0.5" d="M3.27489 15.2957C2.42496 14.1915 2 13.6394 2 12C2 10.3606 2.42496 9.80853 3.27489 8.70433C4.97196 6.49956 7.81811 4 12 4C16.1819 4 19.028 6.49956 20.7251 8.70433C21.575 9.80853 22 10.3606 22 12C22 13.6394 21.575 14.1915 20.7251 15.2957C19.028 17.5004 16.1819 20 12 20C7.81811 20 4.97196 17.5004 3.27489 15.2957Z" stroke="currentColor" stroke-width="1.5"></path>
                                <path d="M15 12C15 13.6569 13.6569 15 12 15C10.3431 15 9 13.6569 9 12C9 10.3431 10.3431 9 12 9C13.6569 9 15 10.3431 15 12Z" stroke="currentColor" stroke-width="1.5"></path>
                            </svg>
                        </a>
                    </div>`
                ]);

                this.datatable = new simpleDatatables.DataTable('#myTable', {
                    data: {
                        headings: [
                            'STT',
                            'Tên tài khoản',
                            'Vai trò',
                            'Họ tên',
                            'Thao tác'
                        ],
                        data: tableData
                    },
                    perPage: 10,
                    perPageSelect: [10, 20, 30, 50, 100],
                    firstLast: true,
                    searchable: false,
                    firstText: '<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" class="w-4.5 h-4.5 rtl:rotate-180"><path d="M13 19L7 12L13 5" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/><path opacity="0.5" d="M16.9998 19L10.9998 12L16.9998 5" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/></svg>',
                    lastText: '<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" class="w-4.5 h-4.5 rtl:rotate-180"><path d="M11 19L17 12L11 5" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/><path opacity="0.5" d="M6.99976 19L12.9998 12L6.99976 5" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/></svg>',
                    prevText: '<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" class="w-4.5 h-4.5 rtl:rotate-180"><path d="M15 5L9 12L15 19" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/></svg>',
                    nextText: '<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" class="w-4.5 h-4.5 rtl:rotate-180"><path d="M9 5L15 12L9 19" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/></svg>',
                    labels: {
                        perPage: "<span class='ml-2'>{select}</span>",
                        noRows: 'Không có dữ liệu'
                    },
                    layout: {
                        top: '{search}',
                        bottom: '{info}{select}{pager}'
                    },
                    columns: [
                        {
                            select: 0,
                            sortable: false,
                            render: (data, cell, row) => {
                                return data;
                            }
                        },
                        {
                            select: 3,
                            sortable: false,
                            render: (data, cell, row) => {
                                return data;
                            }
                        }
                    ],
                });
            }
        }));
    });

    document.getElementById('customSearchInput').addEventListener('input', function () {
        const keyword = removeVietnameseTones(this.value.trim());
        if (window.list) {
            let filtered = window.list.entityList.filter(e =>
                (e.username && removeVietnameseTones(e.username).includes(keyword)) ||
                (e.patientName && removeVietnameseTones(e.patientName).includes(keyword)) ||
                (e.employeeName && removeVietnameseTones(e.employeeName).includes(keyword))
            );
            window.list.filteredList = filtered;
            if (window.list.datatable) window.list.datatable.destroy();
            window.list.initializeTable();
        }
    });

    $(document).ready(function () {
        if (!window.roleChoices) {
            window.roleChoices = new Choices('#filterRole', { searchEnabled: true, itemSelectText: '', shouldSort: false });
        }
        updateResetFilterButtonState();

        $('#filterRole').on('change', function () {
            updateResetFilterButtonState();
            if (!$(this).val()) {
                window.list.filteredList = window.list.entityList;
                if (window.list.datatable) window.list.datatable.destroy();
                window.list.initializeTable();
            }
        });
    });

    // Viết lại hàm filterList
    function filterList() {
        const role = $('#filterRole').val();
        let filtered = window.list.entityList;
        if (role) {
            filtered = filtered.filter(e => String(e.role) === String(role));
        }
        window.list.filteredList = filtered;
        if (window.list.datatable) window.list.datatable.destroy();
        window.list.initializeTable();
        if (filtered.length > 0) notyf.success('Lọc thành công!');
        else if (filtered.length === 0) notyf.error('Không tìm thấy kết quả phù hợp!');
    }

    // Nút Lọc
    $(document).on('click', '#btnFilter', function () {
        const role = $('#filterRole').val();

        if (!role) {
            notyf.error('Cần chọn ít nhất một trường để lọc!');
            window.list.filteredList = window.list.entityList;
            if (window.list.datatable) window.list.datatable.destroy();
            window.list.initializeTable();
            updateResetFilterButtonState();
            return;
        }
        filterList();
    });

    // Nút Hủy lọc
    $(document).on('click', '#btnResetFilter', function () {
        // Reset Choices.js về mặc định cho từng select
        if (window.roleChoices) {
            window.roleChoices.removeActiveItems();
            window.roleChoices.setChoiceByValue('');
        } else {
            $('#filterRole').val('').trigger('change');
        }
        window.list.filteredList = window.list.entityList;
        if (window.list.datatable) window.list.datatable.destroy();
        window.list.initializeTable();
        updateResetFilterButtonState();
    });

    function updateResetFilterButtonState() {
        const role = $('#filterRole').val();
        if (!role) {
            $('#btnResetFilter').prop('disabled', true).css('cursor', 'not-allowed');
        } else {
            $('#btnResetFilter').prop('disabled', false).css('cursor', 'pointer');
        }
    }        
</script>

@if (TempData["SuccessMessage"] != null)
{
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            notyf.success('@Html.Raw(TempData["SuccessMessage"])');
        });
    </script>
}
@if (TempData["ErrorMessage"] != null)
{
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            notyf.error('@Html.Raw(TempData["ErrorMessage"])');
        });
    </script>
}
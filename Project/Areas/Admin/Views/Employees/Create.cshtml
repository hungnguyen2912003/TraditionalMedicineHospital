@using Project.Models.Enums
@model Project.Areas.Admin.Models.DTOs.EmployeeDto

@{
    ViewData["Title"] = "Thêm mới nhân sự";
    Layout = "~/Views/Shared/_mainAdminLayout.cshtml";
}

<div class="overlay" id="loadingOverlay">
    <span
        class="animate-spin border-8 border-[#f1f2f3] border-l-primary rounded-full w-14 h-14 inline-block align-middle"></span>
</div>

<form id="myForm" method="post" enctype="multipart/form-data">
    @Html.AntiForgeryToken()

    <div x-data="addData">
        <ul class="flex space-x-2 rtl:space-x-reverse">
            <li>
                <a href="javascript:;" class="text-primary hover:underline">Danh mục nhân sự</a>
            </li>
            <li class="before:content-['/'] ltr:before:mr-1 rtl:before:ml-1">
                <span>Thêm mới</span>
            </li>
        </ul>
        <div class="pt-5 flex flex-col gap-2.5 xl:flex-row">
            <div class="panel flex-1 px-0 py-6 ltr:lg:mr-6 rtl:lg:ml-6">
                <div class="px-6">
                    <div class="text-2xl font-bold mb-6">Thêm thông tin nhân sự</div>
                    <hr class="mb-6">
                    <div class="flex flex-col lg:flex-row gap-6">
                        <div class="w-full lg:max-w-full p-4 rounded-lg shadow-sm">
                            <div class="flex flex-col sm:flex-row gap-4 mb-4">
                                <div class="w-full sm:w-1/2">
                                    <label for="Code" class="block text-sm font-medium text-gray-700">Mã nhân sự</label>
                                    <input id="Code" type="text" name="Code"
                                        class="form-input w-full mt-1 p-2 border rounded" value="@Model.Code"
                                        readonly />
                                    @Html.ValidationMessageFor(model => model.Code, "", new { @class = "text-danger" })
                                </div>
                                <div class="w-full sm:w-1/2">
                                    <label for="Name" class="block text-sm font-medium text-gray-700">Tên nhân
                                        sự<span
                                class="text-danger">&nbsp*</span></label>
                                    <input id="Name" type="text" name="Name"
                                        class="form-input w-full mt-1 p-2 border rounded"
                                        placeholder="Nhập họ tên nhân sự" maxlength="50" />
                                    @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                                </div>
                                <div class="w-full sm:w-1/2">
                                    <label for="EmployeeCategoryId" class="block text-sm font-medium text-gray-700">Loại
                                        nhân sự<span
                                class="text-danger">&nbsp*</span></label>
                                    <div class="select-wrapper">
                                        <select id="EmployeeCategoryId" name="EmployeeCategoryId"
                                            class="form-input w-full mt-1 p-2 border rounded choices">
                                            <option value="">Chọn loại nhân sự</option>
                                            @foreach (var category in ViewBag.EmployeeCategories)
                                            {
                                                <option value="@category.Id">@category.Name</option>
                                            }
                                        </select>
                                    </div>
                                    @Html.ValidationMessageFor(model => model.EmployeeCategoryId, "", new { @class =
                                    "text-danger" })
                                </div>
                            </div>
                            <div class="flex flex-col sm:flex-row gap-4 mb-4">
                                <div class="w-full sm:w-1/2">
                                    <label for="DepartmentId" class="block text-sm font-medium text-gray-700">Nhân sự
                                        thuộc Khoa<span
                                class="text-danger">&nbsp*</span></label>
                                    <div class="select-wrapper">
                                        <select id="DepartmentId" name="DepartmentId"
                                            class="form-input w-full mt-1 p-2 border rounded"
                                            x-on:change="onDepartmentChange($event)">
                                            <option value="">Chọn khoa</option>
                                            @foreach (var dep in ViewBag.Departments)
                                            {
                                                <option value="@dep.Id">@dep.Name</option>
                                            }
                                        </select>
                                    </div>
                                    @Html.ValidationMessageFor(model => model.DepartmentId, "", new { @class =
                                    "text-danger" })
                                </div>
                                <div class="w-full sm:w-1/2">
                                    <label for="RoomId" class="block text-sm font-medium text-gray-700">Phòng làm
                                        việc<span
                                class="text-danger">&nbsp*</span></label>
                                    <div class="select-wrapper">
                                        <select id="RoomId" name="RoomId"
                                            class="form-input w-full mt-1 p-2 border rounded">
                                            <option value="">Chọn phòng làm việc</option>
                                        </select>
                                    </div>
                                    @Html.ValidationMessageFor(model => model.RoomId, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="flex flex-col sm:flex-row gap-4 mb-4">
                                <div class="w-full sm:w-1/2">
                                    <label for="Gender" class="block text-sm font-medium text-gray-700">Giới
                                        tính<span
                                class="text-danger">&nbsp*</span></label>
                                    <div class="select-wrapper">
                                        <select id="Gender" name="Gender"
                                            class="form-input w-full mt-1 p-2 border rounded choices">
                                            <option value="">Chọn loại giới tính</option>
                                            @foreach (var gender in ViewBag.GenderOptions)
                                            {
                                                <option value="@gender.Value">@gender.Text</option>
                                            }
                                        </select>
                                    </div>
                                    @Html.ValidationMessageFor(model => model.Gender, "", new { @class = "text-danger" })
                                </div>                                
                                <div class="w-full sm:w-1/2">
                                    <label for="DateOfBirth" class="block text-sm font-medium text-gray-700">Ngày
                                        sinh<span
                                class="text-danger">&nbsp*</span></label>
                                    <input id="DateOfBirth" type="text" name="DateOfBirth"
                                        class="form-input w-full mt-1 p-2 border rounded flatpickr"
                                        placeholder="Nhập ngày sinh" maxlength="10" />
                                    @Html.ValidationMessageFor(model => model.DateOfBirth, "", new { @class =
                                                                        "text-danger" })
                                </div>
                                <div class="w-full sm:w-1/2">
                                    <label for="IdentityNumber" class="block text-sm font-medium text-gray-700">Căn cước
                                        công dân<span
                                class="text-danger">&nbsp*</span></label>
                                    <input id="IdentityNumber" type="text" name="IdentityNumber"
                                        class="form-input w-full mt-1 p-2 border rounded"
                                        placeholder="Nhập căn cước công dân" minlength="12" maxlength="12"/>
                                    @Html.ValidationMessageFor(model => model.IdentityNumber, "", new { @class =
                                                                        "text-danger" })
                                </div>
                            </div>
                            <div class="flex flex-col sm:flex-row gap-4 mb-4">
                                <div class="w-full address-container">
                                    <label for="Address" class="block text-sm font-medium text-gray-700">Địa chỉ<span
                                class="text-danger">&nbsp*</span></label>
                                    <input id="Address" type="text" name="Address"
                                        class="form-input w-full mt-1 p-2 border rounded address-autocomplete"
                                        placeholder="Nhập địa chỉ" autocomplete="off" maxlength="500" />
                                    @Html.ValidationMessageFor(model => model.Address, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="flex flex-col sm:flex-row gap-4 mb-4">
                                <div class="w-full sm:w-1/2">
                                    <label for="PhoneNumber" class="block text-sm font-medium text-gray-700">Số điện
                                        thoại<span
                                class="text-danger">&nbsp*</span></label>
                                    <input id="PhoneNumber" type="text" name="PhoneNumber"
                                        class="form-input w-full mt-1 p-2 border rounded"
                                        placeholder="Nhập số điện thoại" minlength="9" maxlength="11"/>
                                    @Html.ValidationMessageFor(model => model.PhoneNumber, "", new { @class =
                                                                        "text-danger" })
                                </div>
                                <div class="w-full sm:w-1/2">
                                    <label for="EmailAddress"
                                        class="block text-sm font-medium text-gray-700">Email<span
                                class="text-danger">&nbsp*</span></label>
                                    <input id="EmailAddress" type="text" name="EmailAddress"
                                        class="form-input w-full mt-1 p-2 border rounded" placeholder="Nhập email" maxlength="50" />
                                    @Html.ValidationMessageFor(model => model.EmailAddress, "", new { @class =
                                                                        "text-danger" })
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="mt-6 w-full xl:mt-0 xl:w-96">
                <div class="panel mb-5">
                    <div class="flex flex-col sm:flex-row gap-4 mb-4">
                        <div class="w-full">
                            <label class="block text-sm font-medium text-gray-700 form-label mb-2">Hình ảnh
                                nhân sự</label>
                            <div class="dropzone flex-1 min-h-[200px] border-2 border-dashed border-gray-300 rounded-lg p-6 flex items-center justify-center relative hover:border-blue-500 transition-colors duration-200"
                                id="imageDropzone">
                                <div class="text-center dz-message" data-dz-message>
                                    <div class="mb-3">
                                        <svg class="mx-auto h-14 w-14 text-gray-400 group-hover:text-blue-500 transition-colors duration-200"
                                            stroke="currentColor" fill="none" viewBox="0 0 48 48" aria-hidden="true">
                                            <path
                                                d="M28 8H12a4 4 0 00-4 4v20m32-12v8m0 0v8a4 4 0 01-4 4H12a4 4 0 01-4-4v-4m32-4l-3.172-3.172a4 4 0 00-5.656 0L28 28M8 32l9.172-9.172a4 4 0 015.656 0L28 28m0 0l4 4m4-24h8m-4-4v8m-12 4h.02"
                                                stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />
                                        </svg>
                                    </div>
                                    <div class="text-gray-500">
                                        <span class="font-medium">Kéo thả hình ảnh vào đây</span> hoặc
                                        <span class="text-blue-500">nhấp để chọn hình ảnh</span>
                                    </div>
                                    <p class="text-xs text-gray-500 mt-2">PNG, JPG, GIF tối đa 10MB</p>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="panel">
                    <div class="grid grid-cols-1 gap-4 sm:grid-cols-2 xl:grid-cols-1">
                        <button type="button" @@click="add()"
                            class="btn btn-success py-2 bg-green-600 text-white rounded-lg flex items-center gap-2 hover:bg-green-700">
                            <svg width="24" height="24" viewBox="0 0 24 24" fill="none"
                                xmlns="http://www.w3.org/2000/svg" class="h-5 w-5">
                                <path
                                    d="M3.46447 20.5355C4.92893 22 7.28595 22 12 22C16.714 22 19.0711 22 20.5355 20.5355C22 19.0711 22 16.714 22 12C22 11.6585 22 11.4878 21.9848 11.3142C21.9142 10.5049 21.586 9.71257 21.0637 9.09034C20.9516 8.95687 20.828 8.83317 20.5806 8.58578L15.4142 3.41944C15.1668 3.17206 15.0431 3.04835 14.9097 2.93631C14.2874 2.414 13.4951 2.08581 12.6858 2.01515C12.5122 2 12.3415 2 12 2C7.28595 2 4.92893 2 3.46447 3.46447C2 4.92893 2 7.28595 2 12C2 16.714 2 19.0711 3.46447 20.5355Z"
                                    stroke="white" stroke-width="1.5"></path>
                                <path
                                    d="M17 22V21C17 19.1144 17 18.1716 16.4142 17.5858C15.8284 17 14.8856 17 13 17H11C9.11438 17 8.17157 17 7.58579 17.5858C7 18.1716 7 19.1144 7 21V22"
                                    stroke="white" stroke-width="1.5"></path>
                                <path opacity="0.5" d="M7 8H13" stroke="white" stroke-width="1.5"
                                    stroke-linecap="round"></path>
                            </svg>
                            Thêm mới
                        </button>
                        <button type="button"
                            class="btn btn-secondary w-full py-2 bg-gray-500 text-white rounded-lg flex items-center gap-2 hover:bg-gray-600"
                                                        @@click = "goBack()" >
                            <svg width="24" height="24" viewBox="0 0 24 24" fill="none"
                                xmlns="http://www.w3.org/2000/svg" class="h-5 w-5">
                                <path
                                    d="M4 10L3.29289 10.7071L2.58579 10L3.29289 9.29289L4 10ZM21 18C21 18.5523 20.5523 19 20 19C19.4477 19 19 18.5523 19 18L21 18ZM8.29289 15.7071L3.29289 10.7071L4.70711 9.29289L9.70711 14.2929L8.29289 15.7071ZM3.29289 9.29289L8.29289 4.29289L9.70711 5.70711L4.70711 10.7071L3.29289 9.29289ZM4 9L14 9L14 11L4 11L4 9ZM21 16L21 18L19 18L19 16L21 16ZM14 9C17.866 9 21 12.134 21 16L19 16C19 13.2386 16.7614 11 14 11L14 9Z"
                                    fill="white" />
                            </svg>
                            Trở về
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</form>

<script>
    Dropzone.autoDiscover = false;
    document.addEventListener('alpine:init', () => {
        Alpine.data('addData', () => ({
            dropzone: null,
            selectedDepartmentId: '',
            rooms: [],
            roomChoices: null,
            departmentChoices: null,

            init() {
                this.setupDropzone();
                this.setupValidation();
                this.setupDateTimePicker();
                this.setupChoices();
                this.departmentChoices.disable();
                this.roomChoices.disable();
                document.getElementById('EmployeeCategoryId').addEventListener('change', () => {
                    this.departmentChoices.enable();
                    this.departmentChoices.setChoiceByValue('');
                    this.roomChoices.disable();
                    this.roomChoices.clearStore();
                    this.filterRoomsByEmployeeCategory();
                });
            },

            setupDateTimePicker() {
                flatpickr('.flatpickr', {
                    dateFormat: "d/m/Y",
                    allowInput: true
                });
            },

            setupChoices() {
                const selectElements = document.querySelectorAll('.choices');
                selectElements.forEach(select => {
                    new Choices(select, {
                        searchEnabled: true,
                        searchPlaceholderValue: 'Tìm kiếm...',
                        removeItemButton: true,
                        noResultsText: 'Không tìm thấy kết quả',
                        noChoicesText: 'Không có lựa chọn nào',
                        itemSelectText: ''
                    });
                });                  
                this.departmentChoices = new Choices('#DepartmentId', {
                    searchEnabled: true,
                    searchPlaceholderValue: 'Tìm kiếm...',
                    removeItemButton: true,
                    noResultsText: 'Không tìm thấy kết quả',
                    noChoicesText: 'Không có lựa chọn nào',
                    itemSelectText: ''
                });
                this.roomChoices = new Choices('#RoomId', {
                    searchEnabled: true,
                    searchPlaceholderValue: 'Tìm kiếm...',
                    removeItemButton: true,
                    noResultsText: 'Không tìm thấy kết quả',
                    noChoicesText: 'Không có lựa chọn nào',
                    itemSelectText: ''
                });
            },

            setupDropzone() {
                const self = this;
                this.dropzone = new Dropzone('#imageDropzone', {
                    url: '/nhan-su/them-moi',
                    autoProcessQueue: false,
                    maxFiles: 1,
                    acceptedFiles: 'image/*',
                    addRemoveLinks: true,
                    dictDefaultMessage: 'Kéo thả hoặc nhấp để chọn ảnh',
                    paramName: 'ImageFile',
                    init: function () {
                        this.on('addedfile', (file) => {
                            if (this.files.length > 1) {
                                this.removeFile(this.files[0]);
                            }
                        });

                        this.on('sending', (file, xhr, formData) => {
                            self.appendFormData(formData);
                        });

                        this.on('success', (file, response) => {
                            self.handleResponse(response);
                        });

                        this.on('error', function (file, errorMessage) {
                            const overlay = document.getElementById('loadingOverlay');
                            overlay.style.display = 'none';
                            notyf.error("Có lỗi xảy ra: " + errorMessage);
                            this.removeFile(file); 
                        });
                    }
                });
            },

            setupValidation() {
                $.validator.addMethod("customPattern", function (value, element, regex) {
                    return this.optional(element) || regex.test(value);
                }, "Giá trị không hợp lệ.");

                $.validator.addMethod("over18", function (value, element) {
                    if (!/^\d{2}\/\d{2}\/\d{4}$/.test(value)) {
                        return false;
                    }
                    var dob = new Date(value.split("/").reverse().join("-"));
                    var today = new Date();
                    var age = today.getFullYear() - dob.getFullYear();
                    var monthDiff = today.getMonth() - dob.getMonth();
                    if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < dob.getDate())) {
                        age--;
                    }
                    return age >= 18;
                }, "Nhân sự phải trên 18 tuổi.");

                $.validator.addMethod("dateFormat", function (value, element) {
                    return this.optional(element) || /^\d{2}\/\d{2}\/\d{4}$/.test(value);
                }, "Vui lòng nhập ngày hợp lệ (dd/mm/yyyy).");

                $("#myForm").validate({
                    ignore: [],
                    rules: {
                        Name: {
                            required: true,
                            minlength: 6,
                            maxlength: 50,
                            customPattern: /^[A-Za-zÀ-ỹ ]*$/
                        },
                        Gender: {
                            required: true
                        },
                        DateOfBirth: {
                            required: true,
                            dateFormat: true,
                            over18: true
                        },
                        IdentityNumber: {
                            required: true,
                            minlength: 12,
                            maxlength: 12,
                            customPattern: /^[0-9]*$/,
                            remote: {
                                url: "/api/validation/employee/check",
                                type: "GET",
                                data: {
                                    type: "identitynumber",
                                    entityType: "employee",
                                    value: function () { return $("#IdentityNumber").val(); }
                                },
                                dataFilter: function (data) {
                                    try {
                                        const response = JSON.parse(data);
                                        if (response.success) {
                                            return response.isUnique === true;
                                        } else {
                                            notyf.error(response.message || "Lỗi khi kiểm tra căn cước công dân.");
                                            return false;
                                        }
                                    } catch (e) {
                                        notyf.error("Lỗi kết nối server.");
                                        return false;
                                    }
                                }
                            }
                        },
                        Address: {
                            required: true,
                            maxlength: 500
                        },
                        EmailAddress: {
                            required: true,
                            email: true,
                            remote: {
                                url: "/api/validation/employee/check",
                                type: "GET",
                                data: {
                                    type: "email",
                                    entityType: "employee",
                                    value: function () { return $("#EmailAddress").val(); }
                                },
                                dataFilter: function (data) {
                                    try {
                                        const response = JSON.parse(data);
                                        if (response.success) {
                                            return response.isUnique === true;
                                        } else {
                                            notyf.error(response.message || "Lỗi khi kiểm tra email.");
                                            return false;
                                        }
                                    } catch (e) {
                                        notyf.error("Lỗi kết nối server.");
                                        return false;
                                    }
                                }
                            }
                        },
                        PhoneNumber: {
                            required: true,
                            minlength: 9,
                            maxlength: 11,
                            customPattern: /^[0-9]*$/,
                            remote: {
                                url: "/api/validation/employee/check",
                                type: "GET",
                                data: {
                                    type: "phone",
                                    entityType: "employee",
                                    value: function () { return $("#PhoneNumber").val(); }
                                },
                                dataFilter: function (data) {
                                    try {
                                        const response = JSON.parse(data);
                                        if (response.success) {
                                            return response.isUnique === true;
                                        } else {
                                            notyf.error(response.message || "Lỗi khi kiểm tra số điện thoại.");
                                            return false;
                                        }
                                    } catch (e) {
                                        notyf.error("Lỗi kết nối server.");
                                        return false;
                                    }
                                }
                            }
                        },
                        EmployeeCategoryId: {
                            required: true
                        },
                        DepartmentId: {
                            required: true
                        },
                        RoomId: {
                            required: true
                        }
                    },
                    messages: {
                        Name: {
                            required: "Tên nhân sự không được bỏ trống.",
                            minlength: "Tên phải có ít nhất 6 ký tự.",
                            maxlength: "Tên không được vượt quá 50 ký tự.",
                            customPattern: "Tên phải bắt đầu bằng chữ cái và chỉ chứa chữ cái."
                        },
                        Gender: {
                            required: "Giới tính không được bỏ trống"
                        },
                        DateOfBirth: {
                            required: "Ngày sinh không được bỏ trống.",
                            dateFormat: "Ngày sinh không hợp lệ.",
                            over18: "Nhân sự phải trên 18 tuổi."
                        },
                        IdentityNumber: {
                            required: "Căn cước công dân không được bỏ trống",
                            minlength: "Căn cước công dân có ít nhất 12 số",
                            maxlength: "Căn cước công dân không vượt quá 12 số",
                            customPattern: "Căn cước công dân không hợp lệ.",
                            remote: "Căn cước công dân này đã được đăng ký bởi nhân sự khác."
                        },
                        Address: {
                            required: "Địa chỉ không được bỏ trống",
                            maxlength: "Địa chỉ không được vượt quá 500 ký tự"
                        },
                        EmailAddress: {
                            required: "Email không được bỏ trống.",
                            email: "Email không hợp lệ.",
                            remote: "Email này đã được đăng ký bởi nhân sự khác."
                        },
                        PhoneNumber: {
                            required: "Số điện thoại không được bỏ trống.",
                            minlength: "Số điện thoại phải có ít nhất 9 ký tự.",
                            maxlength: "Số điện thoại không được vượt quá 11 ký tự.",
                            customPattern: "Số điện thoại không hợp lệ.",
                            remote: "Số điện thoại này đã được đăng ký bởi nhân sự khác."
                        },
                        EmployeeCategoryId: {
                            required: "Loại nhân sự không được bỏ trống."
                        },
                        DepartmentId: {
                            required: "Khoa không được bỏ trống."
                        },
                        RoomId: {
                            required: "Phòng làm việc không được bỏ trống."
                        }
                    },
                    errorElement: "div",
                    errorClass: "text-danger",
                    highlight: function (element) {
                        if ($(element).is('select')) {
                            const choicesContainer = $(element).closest('.select-wrapper').find('.choices__inner');
                            choicesContainer.addClass("border-red-500");
                        } else {
                            $(element).addClass("border-red-500");
                        }
                    },
                    unhighlight: function (element) {
                        if ($(element).is('select')) {
                            const choicesContainer = $(element).closest('.select-wrapper').find('.choices__inner');
                            choicesContainer.removeClass("border-red-500");
                        } else {
                            $(element).removeClass("border-red-500");
                        }
                    },
                    errorPlacement: function (error, element) {
                        if (element.is('select')) {
                            const wrapper = element.closest('.select-wrapper');
                            if (wrapper.length) {
                                error.insertAfter(wrapper);
                            } else {
                                error.insertAfter(element);
                            }
                        } else {
                            error.insertAfter(element);
                        }
                    },
                    onfocusout: function (element) {
                        if ($(element).val() === '' || $(element).val().length > 0) {
                            this.element(element);
                        }
                    },
                    onkeyup: false
                });
                $('select.form-input').on('change', function () {
                    $(this).valid();
                });
            },

            appendFormData(formData) {
                formData.append('Code', document.getElementById('Code').value);
                formData.append('Name', document.getElementById('Name').value);
                formData.append('DateOfBirth', document.getElementById('DateOfBirth').value);
                formData.append('IdentityNumber', document.getElementById('IdentityNumber').value);
                formData.append('Address', document.getElementById('Address').value);
                formData.append('Gender', document.getElementById('Gender').value);
                formData.append('EmailAddress', document.getElementById('EmailAddress').value);
                formData.append('PhoneNumber', document.getElementById('PhoneNumber').value);
                formData.append('EmployeeCategoryId', document.getElementById('EmployeeCategoryId').value);
                formData.append('RoomId', document.getElementById('RoomId').value);
                const token = document.querySelector('input[name="__RequestVerificationToken"]').value;
                formData.append('__RequestVerificationToken', token);
            },

            handleResponse(response) {
                const overlay = document.getElementById('loadingOverlay');
                if (response.success) {
                    overlay.style.display = 'flex';
                    notyf.success(response.message);
                    setTimeout(() => {
                        window.location.href = '/nhan-su';
                    }, 2000);
                } else {
                    overlay.style.display = 'none';
                    notyf.error(response.message);
                    if (response.errors) {
                        response.errors.forEach(error => notyf.error(error));
                    }
                }
            },

            add() {
                const form = document.getElementById('myForm');
                const overlay = document.getElementById('loadingOverlay');
                if ($("#myForm").valid()) {
                    overlay.style.display = 'flex';

                    if (this.dropzone.files.length > 0 && this.dropzone.getQueuedFiles().length > 0) {
                        this.dropzone.processQueue();
                    } else {
                        const formData = new FormData(form);
                        fetch('/nhan-su/them-moi', {
                            method: 'POST',
                            body: formData
                        })
                            .then(response => response.json())
                            .then(this.handleResponse)
                            .catch(error => {
                                overlay.style.display = 'none';
                                notyf.error("Có lỗi xảy ra khi gửi yêu cầu: " + error);
                            });
                    }
                } else {
                    overlay.style.display = 'none';
                    notyf.error("Vui lòng kiểm tra lại thông tin đã nhập.");
                }
            },

            goBack() {
                window.location.href = '/nhan-su';
            },

            onDepartmentChange(e) {
                this.selectedDepartmentId = e.target.value;
                this.rooms = [];
                this.roomChoices.clearStore();

                if (!this.selectedDepartmentId) {
                    this.roomChoices.disable();
                } else {
                    fetch(`/api/Utils/GetRoomsByDepartment/${this.selectedDepartmentId}`)
                        .then(res => res.json())
                        .then(data => {
                            this.rooms = data;
                            this.filterRoomsByEmployeeCategory();
                            this.roomChoices.enable();
                        });
                }
            },

            filterRoomsByEmployeeCategory() {
                const employeeCategoryId = document.getElementById('EmployeeCategoryId').value;
                const selectedText = document.querySelector('#EmployeeCategoryId option:checked').textContent.trim().toLowerCase();
                let filteredRooms = this.rooms;
                if (selectedText === 'bác sĩ' || selectedText === 'nhân viên hành chính') {
                    filteredRooms = this.rooms.filter(room => (room.name || room.Name || '').toLowerCase().includes('hành chính'));
                }
                this.roomChoices.setChoices(
                    filteredRooms.map(room => ({
                        value: room.id || room.Id,
                        label: room.name || room.Name
                    })), 'value', 'label', true
                );
            }
        }));
    });
</script>
@model Project.Areas.Admin.Models.DTOs.MedicineCategoryDto

@{
    ViewData["Title"] = "Chỉnh sửa thông tin loại thuốc";
    Layout = "~/Areas/Admin/Views/Shared/_mainLayout.cshtml";
}

<style>
    .text-danger {
        color: #dc3545;
        font-size: 0.875rem;
        margin-top: 0.25rem;
    }

    .border-red-500 {
        border-color: #dc3545 !important;
        background-color: #fff5f5;
    }

    input:invalid {
        border-color: #dc3545;
        background-color: #fff5f5;
    }

    input:invalid + .text-danger {
        display: block;
        color: #dc3545;
        font-size: 0.875rem;
    }

    .overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.5);
        z-index: 9999;
        display: none;
        justify-content: center;
        align-items: center;
    }

    #fileInput {
        display: none;
    }

    .change-image-btn {
        background-color: #e7515a;
        color: white;
        padding: 8px 16px;
        border-radius: 4px;
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 8px;
        margin-top: 10px;
        margin-left: auto;
        margin-right: auto;
        width: fit-content;
        cursor: pointer;
    }

    .change-image-btn:hover {
        background-color: #ff6666;
    }
</style>

<div class="overlay" id="loadingOverlay">
    <span class="animate-spin border-8 border-[#f1f2f3] border-l-primary rounded-full w-14 h-14 inline-block align-middle"></span>
</div>

<form id="myForm" method="post" enctype="multipart/form-data" asp-action="Edit">
    <input type="hidden" id="Id" name="Id" value="@ViewBag.MedicineCategoryId" />
    @Html.AntiForgeryToken()


    <div x-data="editData">
        <ul class="flex space-x-2 rtl:space-x-reverse">
            <li>
                <a href="javascript:;" class="text-primary hover:underline">Loại thuốc</a>
            </li>
            <li class="before:content-['/'] ltr:before:mr-1 rtl:before:ml-1">
                <span>Chỉnh sửa</span>
            </li>
        </ul>
        <div class="pt-5 flex flex-col gap-2.5 xl:flex-row">
            <div class="panel flex-1 px-0 py-6 ltr:lg:mr-6 rtl:lg:ml-6">
                <div class="px-6">
                    <div class="text-lg font-semibold mb-6">Chỉnh sửa thông tin loại thuốc</div>
                    <div class="flex flex-col lg:flex-row gap-6">
                        <div class="w-full lg:max-w-full p-4 rounded-lg shadow-sm">
                            <div class="flex flex-col sm:flex-row gap-4 mb-4">
                                <div class="w-full sm:w-1/2">
                                    <label for="Code" class="block text-sm font-medium text-gray-700">Mã loại thuốc</label>
                                    <input id="Code" type="text" name="Code" class="form-input w-full mt-1 p-2 border rounded" placeholder="Nhập mã loại thuốc" oninput="this.value = this.value.toUpperCase()" value="@Model.Code" />
                                    @Html.ValidationMessageFor(model => model.Code, "", new { @class = "text-danger" })
                                </div>
                                <div class="w-full sm:w-1/2">
                                    <label for="Name" class="block text-sm font-medium text-gray-700">Tên loại thuốc</label>
                                    <input id="Name" type="text" name="Name" class="form-input w-full mt-1 p-2 border rounded" placeholder="Nhập tên loại thuốc" value="@Model.Name" />
                                    @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="mt-4">
                                <label for="description" class="block text-sm font-medium text-gray-700">Mô tả loại thuốc</label>
                                <textarea id="Description" name="Description" class="form-textarea w-full mt-1 p-2 border rounded min-h-[150px]" placeholder="Nhập mô tả loại thuốc...">@Model.Description</textarea>
                                @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="mt-6 w-full xl:mt-0 xl:w-96">
                <div class="panel mb-5">
                    <div>
                        <label class="block text-sm font-medium text-gray-700 form-label">Hình ảnh loại thuốc</label>
                        <div class="dropzone flex-1" id="imageDropzone"></div>
                        @if (!string.IsNullOrEmpty(ViewBag.ExistingImage))
                        {
                            <label for="fileInput" class="change-image-btn">
                                <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><g id="SVGRepo_bgCarrier" stroke-width="0"></g><g id="SVGRepo_tracerCarrier" stroke-linecap="round" stroke-linejoin="round"></g><g id="SVGRepo_iconCarrier"> <path d="M8.5 10C9.32843 10 10 9.32843 10 8.5C10 7.67157 9.32843 7 8.5 7C7.67157 7 7 7.67157 7 8.5C7 9.32843 7.67157 10 8.5 10Z" fill="#ffffff"></path> <path fill-rule="evenodd" clip-rule="evenodd" d="M11.0055 2H12.9945C14.3805 1.99999 15.4828 1.99999 16.3716 2.0738C17.2819 2.14939 18.0575 2.30755 18.7658 2.67552C19.8617 3.24477 20.7552 4.1383 21.3245 5.23415C21.6925 5.94253 21.8506 6.71811 21.9262 7.62839C22 8.5172 22 9.61946 22 11.0054V12.9945C22 13.6854 22 14.306 21.9909 14.8646C22.0049 14.9677 22.0028 15.0726 21.9846 15.175C21.9741 15.6124 21.9563 16.0097 21.9262 16.3716C21.8506 17.2819 21.6925 18.0575 21.3245 18.7658C20.7552 19.8617 19.8617 20.7552 18.7658 21.3245C18.0575 21.6925 17.2819 21.8506 16.3716 21.9262C15.4828 22 14.3805 22 12.9946 22H11.0055C9.61955 22 8.5172 22 7.62839 21.9262C6.71811 21.8506 5.94253 21.6925 5.23415 21.3245C4.43876 20.9113 3.74996 20.3273 3.21437 19.6191C3.20423 19.6062 3.19444 19.5932 3.185 19.5799C2.99455 19.3238 2.82401 19.0517 2.67552 18.7658C2.30755 18.0575 2.14939 17.2819 2.0738 16.3716C1.99999 15.4828 1.99999 14.3805 2 12.9945V11.0055C1.99999 9.61949 1.99999 8.51721 2.0738 7.62839C2.14939 6.71811 2.30755 5.94253 2.67552 5.23415C3.24477 4.1383 4.1383 3.24477 5.23415 2.67552C5.94253 2.30755 6.71811 2.14939 7.62839 2.0738C8.51721 1.99999 9.61949 1.99999 11.0055 2ZM20 11.05V12.5118L18.613 11.065C17.8228 10.2407 16.504 10.2442 15.7182 11.0727L11.0512 15.9929L9.51537 14.1359C8.69326 13.1419 7.15907 13.1746 6.38008 14.2028L4.19042 17.0928C4.13682 16.8463 4.09606 16.5568 4.06694 16.2061C4.0008 15.4097 4 14.3905 4 12.95V11.05C4 9.60949 4.0008 8.59025 4.06694 7.79391C4.13208 7.00955 4.25538 6.53142 4.45035 6.1561C4.82985 5.42553 5.42553 4.82985 6.1561 4.45035C6.53142 4.25538 7.00955 4.13208 7.79391 4.06694C8.59025 4.0008 9.60949 4 11.05 4H12.95C14.3905 4 15.4097 4.0008 16.2061 4.06694C16.9905 4.13208 17.4686 4.25538 17.8439 4.45035C18.5745 4.82985 19.1702 5.42553 19.5497 6.1561C19.7446 6.53142 19.8679 7.00955 19.9331 7.79391C19.9992 8.59025 20 9.60949 20 11.05ZM6.1561 19.5497C5.84198 19.3865 5.55279 19.1833 5.295 18.9467L7.97419 15.4106L9.51005 17.2676C10.2749 18.1924 11.6764 18.24 12.5023 17.3693L17.1693 12.449L19.9782 15.3792C19.9683 15.6812 19.9539 15.9547 19.9331 16.2061C19.8679 16.9905 19.7446 17.4686 19.5497 17.8439C19.1702 18.5745 18.5745 19.1702 17.8439 19.5497C17.4686 19.7446 16.9905 19.8679 16.2061 19.9331C15.4097 19.9992 14.3905 20 12.95 20H11.05C9.60949 20 8.59025 19.9992 7.79391 19.9331C7.00955 19.8679 6.53142 19.7446 6.1561 19.5497Z" fill="#ffffff"></path> </g></svg>
                                Thay đổi ảnh
                            </label>
                        }
                        <input type="file" id="fileInput" accept="image/*">
                    </div>
                </div>
                <div class="panel">
                    <div class="grid grid-cols-1 gap-4 sm:grid-cols-2 lg:grid-cols-4 xl:grid-cols-1">
                        <button type="button" @@click ="update()" class="btn btn-success py-2 bg-green-600 text-white rounded-lg flex items-center gap-2 hover:bg-green-700">
                            <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" class="h-5 w-5">
                                <path d="M3.46447 20.5355C4.92893 22 7.28595 22 12 22C16.714 22 19.0711 22 20.5355 20.5355C22 19.0711 22 16.714 22 12C22 11.6585 22 11.4878 21.9848 11.3142C21.9142 10.5049 21.586 9.71257 21.0637 9.09034C20.9516 8.95687 20.828 8.83317 20.5806 8.58578L15.4142 3.41944C15.1668 3.17206 15.0431 3.04835 14.9097 2.93631C14.2874 2.414 13.4951 2.08581 12.6858 2.01515C12.5122 2 12.3415 2 12 2C7.28595 2 4.92893 2 3.46447 3.46447C2 4.92893 2 7.28595 2 12C2 16.714 2 19.0711 3.46447 20.5355Z" stroke="white" stroke-width="1.5"></path>
                                <path d="M17 22V21C17 19.1144 17 18.1716 16.4142 17.5858C15.8284 17 14.8856 17 13 17H11C9.11438 17 8.17157 17 7.58579 17.5858C7 18.1716 7 19.1144 7 21V22" stroke="white" stroke-width="1.5"></path>
                                <path opacity="0.5" d="M7 8H13" stroke="white" stroke-width="1.5" stroke-linecap="round"></path>
                            </svg>
                            Cập nhật
                        </button>
                        <button type="button" class="btn btn-secondary w-full py-2 bg-gray-500 text-white rounded-lg flex items-center gap-2 hover:bg-gray-600" @@click ="goBack()">
                            <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" class="h-5 w-5">
                                <path d="M4 10L3.29289 10.7071L2.58579 10L3.29289 9.29289L4 10ZM21 18C21 18.5523 20.5523 19 20 19C19.4477 19 19 18.5523 19 18L21 18ZM8.29289 15.7071L3.29289 10.7071L4.70711 9.29289L9.70711 14.2929L8.29289 15.7071ZM3.29289 9.29289L8.29289 4.29289L9.70711 5.70711L4.70711 10.7071L3.29289 9.29289ZM4 9L14 9L14 11L4 11L4 9ZM21 16L21 18L19 18L19 16L21 16ZM14 9C17.866 9 21 12.134 21 16L19 16C19 13.2386 16.7614 11 14 11L14 9Z" fill="white" />
                            </svg>
                            Trở về
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</form>


<script>
    Dropzone.autoDiscover = false;

    $.validator.addMethod("customPattern", function(value, element, regex) {
        return this.optional(element) || regex.test(value);
    }, "Giá trị không hợp lệ.");

    document.addEventListener('alpine:init', () => {
        Alpine.data('editData', () => ({
            dropzone: null,

            init() {
                const fileInput = document.getElementById('fileInput');
                fileInput.addEventListener('change', (event) => {
                    const file = event.target.files[0];
                    if (file) {
                        if (this.dropzone.files.length > 0) {
                            this.dropzone.removeAllFiles();
                        }
                        this.dropzone.addFile(file);
                    }
                });

                this.setupDropzone();
                this.setupValidation();
            },

            setupDropzone() {
                const self = this;
                this.dropzone = new Dropzone('#imageDropzone', {
                    url: '/Admin/MedicineCategories/Edit',
                    autoProcessQueue: false,
                    maxFiles: 1,
                    acceptedFiles: 'image/*',
                    addRemoveLinks: false,
                    dictDefaultMessage: 'Kéo thả hoặc nhấp để chọn ảnh',
                    paramName: 'ImageFile',
                    init: function () {
                        const existingImage = '@ViewBag.ExistingImage';
                        if (existingImage) {
                            const mockFile = { name: existingImage, size: 12345, accepted: true };
                            this.emit('addedfile', mockFile);
                            this.emit('thumbnail', mockFile, `/Images/MedicineCategories/${existingImage}`);
                            this.files.push(mockFile);
                        }

                        this.on('addedfile', (file) => {
                            if (this.files.length > 1) {
                                this.removeFile(this.files[0]);
                            }
                        });

                        this.on('sending', (file, xhr, formData) => {
                            self.appendFormData(formData);
                        });
                        this.on('success', (file, response) => {
                            self.handleResponse(response);
                        });
                        this.on('error', (file, errorMessage) => {
                            notyf.error("Có lỗi xảy ra: " + errorMessage);
                        });
                    }
                });
            },

            setupValidation() {
                $("#myForm").validate({
                    rules: {
                        Code: {
                            required: true,
                            minlength: 4,
                            maxlength: 10,
                            customPattern: /^[A-Za-z][A-Za-z0-9]*$/,
                            remote: {
                                url: "/api/validation/medicinecategory/check-code",
                                type: "GET",
                                data: {
                                    entityType: "medicinecategory",
                                    code: function() { return $("#Code").val(); },
                                    id: function() { return $("#Id").val(); }
                                }
                            }

                        },
                        Name: {
                            required: true,
                            minlength: 6,
                            maxlength: 20,
                            customPattern: /^[A-Za-zÀ-ỹ][A-Za-zÀ-ỹ0-9 ]*$/,
                            remote: {
                                url: "/api/validation/medicinecategory/check-name",
                                type: "GET",
                                data: {
                                    entityType: "medicinecategory",
                                    name: function() { return $("#Name").val(); },
                                    id: function() { return $("#Id").val(); }
                                }
                            }
                        }
                    },
                    messages: {
                        Code: {
                            required: "Mã loại thuốc không được bỏ trống.",
                            minlength: "Mã phải có ít nhất 4 ký tự.",
                            maxlength: "Mã không được vượt quá 10 ký tự.",
                            customPattern: "Mã phải bắt đầu bằng chữ cái và chỉ chứa chữ cái hoặc số.",
                            remote: "Mã loại thuốc đã tồn tại."
                        },
                        Name: {
                            required: "Tên loại thuốc không được bỏ trống.",
                            minlength: "Tên phải có ít nhất 6 ký tự.",
                            maxlength: "Tên không được vượt quá 50 ký tự.",
                            customPattern: "Tên phải bắt đầu bằng chữ cái và chỉ chứa chữ cái, số hoặc khoảng trắng.",
                            remote: "Tên loại thuốc đã tồn tại."
                        }
                    },
                    errorElement: "div",
                    errorClass: "text-danger",
                    highlight: function (element) {
                        $(element).addClass("border-red-500");
                    },
                    unhighlight: function (element) {
                        $(element).removeClass("border-red-500");
                    },
                    errorPlacement: function (error, element) {
                        error.insertAfter(element);
                    },
                    onfocusout: function (element) {
                        if ($(element).val() === '' || $(element).val().length > 0) {
                            this.element(element);
                        }
                    },
                    onkeyup: false
                });
            },

            appendFormData(formData) {
                formData.append('Id', document.querySelector('input[name="Id"]').value);
                formData.append('Code', document.getElementById('Code').value);
                formData.append('Name', document.getElementById('Name').value);
                formData.append('Description', document.getElementById('Description').value);
                const token = document.querySelector('input[name="__RequestVerificationToken"]').value;
                formData.append('__RequestVerificationToken', token);
            },

            handleResponse(response) {
                const overlay = document.getElementById('loadingOverlay');
                if (response.success) {
                    overlay.style.display = 'flex';
                    notyf.success(response.message);
                    setTimeout(() => {
                        window.location.href = '/Admin/MedicineCategories/';
                    }, 2000);
                } else {
                    overlay.style.display = 'none';
                    notyf.error(response.message);
                    if (response.errors) {
                        response.errors.forEach(error => notyf.error(error));
                    }
                }
            },

            update() {
                const form = document.getElementById('myForm');
                if ($("#myForm").valid()) {
                    const overlay = document.getElementById('loadingOverlay');
                    overlay.style.display = 'flex';

                    const id = document.querySelector('input[name="Id"]').value;

                    if (this.dropzone.files.length > 0 && this.dropzone.getQueuedFiles().length > 0) {
                        this.dropzone.processQueue();
                    } else {
                        const formData = new FormData(form);
                        formData.append('Id', id);
                        fetch('/Admin/MedicineCategories/Edit', {
                            method: 'POST',
                            body: formData
                        })
                        .then(response => response.json())
                        .then(this.handleResponse)
                        .catch(error => {
                            overlay.style.display = 'none';
                            notyf.error("Có lỗi xảy ra khi gửi yêu cầu: " + error);
                        });
                    }
                }
                else{
                    notyf.error("Vui lòng kiểm tra lại thông tin nhập.");
                }
            },

            goBack() {
                window.location.href = '/Admin/MedicineCategories/';
            }
        }));
    });
</script>
@model Project.Areas.Staff.Models.DTOs.TreatmentRecordDto

@{
    ViewData["Title"] = "Chỉnh sửa thông tin đợt điều trị";
    Layout = "~/Views/Shared/_mainAdminLayout.cshtml";
}

<div class="overlay" id="loadingOverlay">
    <span class="animate-spin border-8 border-[#f1f2f3] border-l-primary rounded-full w-14 h-14 inline-block align-middle"></span>
</div>

<form id="myForm" method="post" enctype="multipart/form-data" asp-action="Edit">
    <input type="hidden" id="Id" name="Id" value="@ViewBag.TreatmentRecordId" />
    @Html.AntiForgeryToken()


    <div x-data="editData">
        <ul class="flex space-x-2 rtl:space-x-reverse">
            <li>
                <a href="javascript:;" class="text-primary hover:underline">Đợt điều trị</a>
            </li>
            <li class="before:content-['/'] ltr:before:mr-1 rtl:before:ml-1">
                <span>Chỉnh sửa</span>
            </li>
        </ul>
        <div class="pt-5 flex flex-col gap-2.5 xl:flex-row">
            <div class="panel flex-1 px-0 py-6 ltr:lg:mr-6 rtl:lg:ml-6">
                <div class="px-6">
                    <div class="text-lg font-semibold mb-6">Chỉnh sửa thông tin đợt điều trị</div>
                    <div class="flex flex-col lg:flex-row gap-6">
                        <div class="w-full lg:max-w-full p-4 rounded-lg shadow-sm">
                            <div class="flex flex-col sm:flex-row gap-4 mb-4">
                                <div class="w-full sm:w-1/2">
                                    <label for="Code" class="block text-sm font-medium text-gray-700">Mã đợt điều trị</label>
                                    <input id="Code" type="text" name="Code" class="form-input w-full mt-1 p-2 border rounded" value="@Model.Code" readonly />
                                    @Html.ValidationMessageFor(model => model.Code, "", new { @class = "text-danger" })
                                </div>
                                <div class="w-full sm:w-1/2">
                                    <label for="PatientId" class="block text-sm font-medium text-gray-700">Đợt điều trị của bệnh nhân</label>
                                    <div class="select-wrapper">
                                        <select id="PatientId" name="PatientId" class="form-input w-full mt-1 p-2 border rounded">
                                            <option value="">Chọn bệnh nhân</option>
                                            @foreach (var p in ViewBag.Patients)
                                            {
                                                if (p.Id == Model.PatientId)
                                                {
                                                    <option value="@p.Id" selected>@p.Name</option>
                                                }
                                                else
                                                {
                                                    <option value="@p.Id">@p.Name</option>
                                                }
                                            }
                                        </select>
                                    </div>
                                    @Html.ValidationMessageFor(model => model.PatientId, "", new { @class = "text-danger" })
                                </div>
                                <div class="w-full sm:w-1/2">
                                    <label for="Diagnosis" class="block text-sm font-medium text-gray-700">Chuẩn đoán</label>
                                    <input id="Diagnosis" type="text" name="Diagnosis" class="form-input w-full mt-1 p-2 border rounded" value="@Model.Diagnosis" placeholder="Nhập chuẩn đoán" />
                                    @Html.ValidationMessageFor(model => model.Diagnosis, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="flex flex-col sm:flex-row gap-4 mb-4">
                                <div class="w-full sm:w-1/2">
                                    <label for="StartDate" class="block text-sm font-medium text-gray-700">Ngày bắt đầu điều trị</label>
                                    <input id="StartDate" type="text" name="StartDate" class="form-input w-full mt-1 p-2 border rounded flatpickr" placeholder="Nhập bắt đầu điều trị" @Model.StartDate />
                                    @Html.ValidationMessageFor(model => model.StartDate, "", new { @class = "text-danger" })
                                </div>
                                <div class="w-full sm:w-1/2">
                                    <label for="EndDate" class="block text-sm font-medium text-gray-700">Ngày kết thúc điều trị</label>
                                    <input id="EndDate" type="text" name="EndDate" class="form-input w-full mt-1 p-2 border rounded flatpickr" placeholder="Nhập kết thúc điều trị" @Model.EndDate />
                                    @Html.ValidationMessageFor(model => model.EndDate, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="mt-4">
                                <label for="Note" class="block text-sm font-medium text-gray-700">Ghi chú</label>
                                <textarea id="Note" name="Note" class="form-textarea w-full mt-1 p-2 border rounded min-h-[150px]" placeholder="Nhập ghi chú...">@Model.Note</textarea>
                                @Html.ValidationMessageFor(model => model.Note, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</form>


<script>
    $.validator.addMethod("customPattern", function(value, element, regex) {
        return this.optional(element) || regex.test(value);
    }, "Giá trị không hợp lệ.");

    document.addEventListener('alpine:init', () => {
        Alpine.data('editData', () => ({

            init() {
                this.setupValidation();
                this.setupChoices();
                this.setupDatePicker();
            },

            setupChoices() {
                const selectElements = document.querySelectorAll('select.form-input');
                selectElements.forEach(select => {
                    new Choices(select, {
                        searchEnabled: true,
                        searchPlaceholderValue: 'Tìm kiếm...',
                        removeItemButton: true,
                        noResultsText: 'Không tìm thấy kết quả',
                        noChoicesText: 'Không có lựa chọn nào',
                        itemSelectText: ''
                    });
                });
            },

            setupDateTimePicker() {
                flatpickr('.flatpickr', {
                    dateFormat: "d/m/Y",
                    allowInput: true
                });
            },

            setupValidation() {
                $("#myForm").validate({
                    ignore: [],
                    rules: {
                        StartDate: {
                            required: true,
                            dateFormat: true,
                        },
                        EndDate: {
                            required: true,
                            dateFormat: true,
                        },
                        PatientId: {
                            required: true,
                        },
                        Diagnosis: {
                            required: true
                        }
                    },
                    messages: {
                        StartDate: {
                            required: "Ngày bắt đầu điều trị không được bỏ trống.",
                            dateFormat: "Ngày bắt đầu điều trị không hợp lệ.",
                        },
                        EndDate: {
                            required: "Ngày kết thúc điều trị không được bỏ trống.",
                            dateFormat: "Ngày kết thúc điều trị không hợp lệ.",
                        },
                        PatientId: {
                            required: "Bệnh nhân của đợt điều trị không được bỏ trống.",
                        },
                        Diagnosis: {
                            required: "Chuẩn đoán không được bỏ trống.",
                        }
                    },
                    errorElement: "div",
                    errorClass: "text-danger",
                    highlight: function (element) {
                        if ($(element).is('select')) {
                            const choicesContainer = $(element).closest('.select-wrapper').find('.choices__inner');
                            choicesContainer.addClass("border-red-500");
                        } else {
                            $(element).addClass("border-red-500");
                        }
                    },
                    unhighlight: function (element) {
                        if ($(element).is('select')) {
                            const choicesContainer = $(element).closest('.select-wrapper').find('.choices__inner');
                            choicesContainer.removeClass("border-red-500");
                        } else {
                            $(element).removeClass("border-red-500");
                        }
                    },
                    errorPlacement: function (error, element) {
                        if (element.is('select')) {
                            const wrapper = element.closest('.select-wrapper');
                            if (wrapper.length) {
                                error.insertAfter(wrapper);
                            } else {
                                error.insertAfter(element);
                            }
                        } else {
                            error.insertAfter(element);
                        }
                    },
                    onfocusout: function (element) {
                        if ($(element).val() === '' || $(element).val().length > 0) {
                            this.element(element);
                        }
                    },
                    onkeyup: false
                });

                $('select.form-input').on('change', function() {
                    $(this).valid();
                });
            },

            appendFormData(formData) {
                formData.append('Code', document.getElementById('Code').value);
                formData.append('PatientId', document.getElementById('PatientId').value);
                formData.append('Diagnosis', document.getElementById('Diagnosis').value);
                formData.append('StartDate', document.getElementById('StartDate').value);
                formData.append('EndDate', document.getElementById('EndDate').value);
                formData.append('Note', document.getElementById('Note').value);
                const token = document.querySelector('input[name="__RequestVerificationToken"]').value;
                formData.append('__RequestVerificationToken', token);
            },

            handleResponse(response) {
                const overlay = document.getElementById('loadingOverlay');
                if (response.success) {
                    overlay.style.display = 'flex';
                    notyf.success(response.message);
                    setTimeout(() => {
                        window.location.href = '/Staff/TreatmentRecords/';
                    }, 2000);
                } else {
                    overlay.style.display = 'none';
                    notyf.error(response.message);
                    if (response.errors) {
                        response.errors.forEach(error => notyf.error(error));
                    }
                }
            },

            update() {
                const form = document.getElementById('myForm');
                if ($("#myForm").valid()) {
                    const overlay = document.getElementById('loadingOverlay');
                    overlay.style.display = 'flex';

                    const id = document.querySelector('input[name="Id"]').value;
                    const formData = new FormData(form);
                    formData.append('Id', id);
                    fetch('/Staff/TreatmentRecords/Edit', {
                        method: 'POST',
                        body: formData
                    })
                    .then(response => response.json())
                    .then(this.handleResponse)
                    .catch(error => {
                        overlay.style.display = 'none';
                        notyf.error("Có lỗi xảy ra khi gửi yêu cầu: " + error);
                    });
                }
                else{
                    notyf.error("Vui lòng kiểm tra lại thông tin nhập.");
                }
            },

            goBack() {
                window.location.href = '/Staff/TreatmentRecords/';
            }
        }));
    });
</script>


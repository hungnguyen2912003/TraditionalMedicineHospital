@model IEnumerable<Project.Areas.Staff.Models.ViewModels.PrescriptionViewModel>
@{
    ViewData["Title"] = "Danh sách đơn thuốc";
    Layout = "~/Views/Shared/_mainAdminLayout.cshtml";
}

<form id="myForm" method="post">
    @Html.AntiForgeryToken()
    <input type="hidden" name="selectedIds" id="selectedIds" />


    <ul class="flex space-x-2 rtl:space-x-reverse">
        <li>
            <a href="javascript:;" class="text-primary hover:underline">Danh mục đơn thuốc</a>
        </li>
        <li class="before:content-['/'] ltr:before:mr-1 rtl:before:ml-1">
            <span>Danh sách</span>
        </li>
    </ul>

    <div x-data="list">
        <div class="panel border-[#e0e6ed] px-0 dark:border-[#1b2e4b] mt-3">
            <div class="px-5">
                <div class="text-2xl font-bold mb-6">Danh sách đơn thuốc</div>
                <hr class="mb-6">
                <div class="flex flex-wrap items-center justify-between gap-4 mb-5">
                    <div class="flex w-full flex-col gap-4 sm:w-auto sm:flex-row sm:items-center sm:gap-3">
                        <button type="button" x-on:click="deleteSelected" class="btn btn-danger">
                            <svg class="h-5 w-5 ltr:mr-2 rtl:ml-2" viewBox="0 0 24 24" fill="none"
                                xmlns="http://www.w3.org/2000/svg">
                                <g id="SVGRepo_bgCarrier" stroke-width="0"></g>
                                <g id="SVGRepo_tracerCarrier" stroke-linecap="round" stroke-linejoin="round"></g>
                                <g id="SVGRepo_iconCarrier">
                                    <path
                                        d="M12 10V17M8 10V17M19 9H22M19 14H22M19 19H21M16 6V16.2C16 17.8802 16 18.7202 15.673 19.362C15.3854 19.9265 14.9265 20.3854 14.362 20.673C13.7202 21 12.8802 21 11.2 21H8.8C7.11984 21 6.27976 21 5.63803 20.673C5.07354 20.3854 4.6146 19.9265 4.32698 19.362C4 18.7202 4 17.8802 4 16.2V6M2 6H18M14 6L13.7294 5.18807C13.4671 4.40125 13.3359 4.00784 13.0927 3.71698C12.8779 3.46013 12.6021 3.26132 12.2905 3.13878C11.9376 3 11.523 3 10.6936 3H9.30643C8.47705 3 8.06236 3 7.70951 3.13878C7.39792 3.26132  7.12208 3.46013 6.90729 3.71698C6.66405 4.00784 6.53292 4.40125 6.27064 5.18807L6 6"
                                        stroke="#ffffff" stroke-width="2" stroke-linecap="round"
                                        stroke-linejoin="round"></path>
                                </g>
                            </svg>
                            Xóa nhanh
                        </button>
                    </div>
                    <div class="flex w-1/2 flex-col gap-4 sm:w-auto sm:flex-row sm:items-center sm:gap-3">
                        <div class="flex gap-3">
                            <div class="group relative">
                                <input type="text" placeholder="Tìm kiếm..." id="customSearchInput"
                                    class="peer form-input ltr:pr-8 rtl:pl-8">
                                <div
                                    class="absolute top-1/2 -translate-y-1/2 peer-focus:text-primary ltr:right-[11px] rtl:left-[11px]">
                                    <svg width="24" height="24" viewbox="0 0 24 24" fill="none"
                                        xmlns="http://www.w3.org/2000/svg" class="h-4 w-4">
                                        <circle cx="11.5" cy="11.5" r="9.5" stroke="currentColor" stroke-width="1.5"
                                            opacity="0.5"></circle>
                                        <path d="M18.5 18.5L22 22" stroke="currentColor" stroke-width="1.5"
                                            stroke-linecap="round"></path>
                                    </svg>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="filter-divider">
                <span>Bộ lọc</span>
            </div>

            <div class="flex flex-col gap-2 w-full mt-4">
                <div class="flex flex-col sm:flex-row gap-5 mb-2 justify-center items-center">
                    <div class="w-48">
                        <input id="filterDate" type="text"
                            class="filter-input filter-bar-item form-input w-full mt-1 p-2 border rounded flatpickr"
                            placeholder="Chọn ngày lập đơn thuốc..." autocomplete="off" />
                    </div>
                    <div class="w-32">
                        <button id="btnFilter" type="button" class="btn btn-primary w-full">
                            <svg xmlns="http://www.w3.org/2000/svg" class="inline-block mr-2" width="20" height="20"
                                fill="none" viewBox="0 0 24 24">
                                <path d="M4 5h16M6 10h12M9 15h6M10 20h4" stroke="currentColor" stroke-width="2"
                                    stroke-linecap="round" />
                            </svg>
                            Lọc
                        </button>
                    </div>
                    <div class="w-32">
                        <button id="btnResetFilter" type="button" class="btn btn-secondary w-full" disabled
                            style="cursor: not-allowed;">
                            <svg xmlns="http://www.w3.org/2000/svg" class="inline-block mr-2" width="18" height="18"
                                fill="none" viewBox="0 0 24 24">
                                <path d="M6 18L18 6M6 6l12 12" stroke="currentColor" stroke-width="2"
                                    stroke-linecap="round" />
                            </svg>
                            Hủy lọc
                        </button>
                    </div>
                </div>
            </div>
            <!-- FILTER BAR END -->

            <div class="table-responsive">
                <table id="myTable" class="table-striped table-hover"></table>
            </div>
        </div>
    </div>
</form>

<div id="prescriptionModal" class="fixed inset-0 z-50 flex items-center justify-center hidden">
    <div class="bg-white rounded-lg shadow-lg w-full max-w-5xl p-6 relative modal-content-animate">
        <div class="text-2xl font-bold text-primary text-center mb-4">Cập nhật thông tin đơn thuốc</div>
        <div id="prescriptionModalBody">
            <div class="mb-4 flex gap-4">
                <div class="w-1/2">
                    <label for="prescriptionRecordCode" class="block font-semibold mb-1">Mã phiếu điều trị</label>
                    <input type="text" id="prescriptionRecordCode" class="form-input w-full" readonly>
                </div>
                <div class="w-1/2">
                    <label for="prescriptionRecordPatient" class="block font-semibold mb-1">Tên bệnh nhân</label>
                    <input type="text" id="prescriptionRecordPatient" class="form-input w-full" readonly>
                </div>
                <div class="w-1/2">
                    <label for="prescriptionCreatedDate" class="block font-semibold mb-1">Ngày lập đơn thuốc</label>
                    <input type="text" id="prescriptionCreatedDate" class="form-input w-full" placeholder="Chọn ngày..."
                        readonly>
                </div>
            </div>
            <div class="mb-4">
                <label for="prescriptionNote" class="block font-semibold mb-1">Ghi chú</label>
                <textarea id="prescriptionNote" class="form-input w-full" placeholder="Nhập ghi chú..."
                    style="resize: none; min-height: 60px; max-height: 120px; height: 80px;"></textarea>
            </div>
            <div class="table-responsive mt-6">
                <table class="table-striped w-full">
                    <thead>
                        <tr>
                            <th style="text-align: center; font-weight: bold;">Tên thuốc</th>
                            <th style="text-align: center; font-weight: bold;">Số lượng</th>
                            <th style="text-align: center; font-weight: bold;">Đơn giá</th>
                            <th style="text-align: center; font-weight: bold;">Thành tiền</th>
                            <th style="text-align: center; font-weight: bold;"></th>
                        </tr>
                    </thead>
                    <tbody id="prescriptionItemsBody">
                    </tbody>
                </table>
            </div>
            <div class="mt-6 flex flex-col sm:flex-row justify-between px-4">
                <button type="button" class="btn btn-primary mb-4 sm:mb-0" id="btnAddMedicine">Thêm thuốc</button>
                <div class="sm:w-2/5">
                    <div class="flex items-center justify-between" style="font-weight: bold;">
                        <div>Tổng tiền</div>
                        <div id="prescriptionTotal">0 VNĐ</div>
                    </div>
                </div>
            </div>
        </div>
        <div style="display: flex; justify-content: center; gap: 24px;">
            <button class="btn btn-primary btn-save">Lưu</button>
            <button id="closePrescriptionModal" class="btn btn-secondary">Đóng</button>
        </div>
    </div>
</div>

<script src="~/Public/assets/js/simple-datatables.js"></script>

<script>

    document.addEventListener('alpine:init', () => {
        Alpine.data('list', () => ({
            entityList: @Html.Raw(Json.Serialize(Model)),
            filteredList: [],
            selectedRows: [],
            datatable: null,
            currentPrescriptionId: null,

            init() {
                if (!Array.isArray(this.entityList)) {
                    this.entityList = [];
                }
                this.filteredList = [...this.entityList];
                window.list = this;
                this.initializeTable();
            },

            initializeTable() {
                try {
                    const tableData = this.filteredList.map(entity => [
                        `<input type="checkbox" class="form-checkbox" value="${entity.id}" ${this.selectedRows.includes(entity.id.toString()) ? 'checked' : ''} />`,
                        entity.code,
                        entity.treatmentRecordCode,
                        entity.patientName,
                        entity.prescriptionDate ? new Date(entity.prescriptionDate).toLocaleDateString('vi-VN') : 'Không xác định',
                        entity.totalPrice.toLocaleString('vi-VN', { style: 'currency', currency: 'VND' }),
                        `<div class="flex gap-4">
                            <a href="javascript:;" class="hover:text-info edit-prescription-btn" x-tooltip="Chỉnh sửa" data-id="${entity.id}">
                                <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" class="w-4.5 h-4.5">
                                    <path opacity="0.5" d="M22 10.5V12C22 16.714 22 19.0711 20.5355 20.5355C19.0711 22 16.714 22 12 22C7.28595 22 4.92893 22 3.46447 20.5355C2 19.0711 2 16.714 2 12C2 7.28595 2 4.92893 3.46447 3.46447C4.92893 2 7.28595 2 12 2H13.5" stroke="currentColor" stroke-width="1.5" stroke-linecap="round"></path>
                                    <path d="M17.3009 2.80624L16.652 3.45506L10.6872 9.41993C10.2832 9.82394 10.0812 10.0259 9.90743 10.2487C9.70249 10.5114 9.52679 10.7957 9.38344 11.0965C9.26191 11.3515 9.17157 11.6225 8.99089 12.1646L8.41242 13.9L8.03811 15.0229C7.9492 15.2897 8.01862 15.5837 8.21744 15.7826C8.41626 15.9814 8.71035 16.0508 8.97709 15.9619L10.1 15.5876L11.8354 15.0091C12.3775 14.8284 12.6485 14.7381 12.9035 14.6166C13.2043 14.4732 13.4886 14.2975 13.7513 14.0926C13.9741 13.9188 14.1761 13.7168 14.5801 13.3128L20.5449 7.34795L21.1938 6.69914C22.2687 5.62415 22.2687 3.88124 21.1938 2.80624C20.1188 1.73125 18.3759 1.73125 17.3009 2.80624Z" stroke="currentColor" stroke-width="1.5"></path>
                                    <path opacity="0.5" d="M16.6522 3.45508C16.6522 3.45508 16.7333 4.83381 17.9499 6.05034C19.1664 7.26687 20.5451 7.34797 20.5451 7.34797M10.1002 15.5876L8.4126 13.9" stroke="currentColor" stroke-width="1.5"></path>
                                </svg>
                            </a>
                            <a href="/don-thuoc/chi-tiet/${entity.id}" class="hover:text-primary" x-tooltip="Xem chi tiết">
                                <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" class="w-5 h-5">
                                    <path opacity="0.5" d="M3.27489 15.2957C2.42496 14.1915 2 13.6394 2 12C2 10.3606 2.42496 9.80853 3.27489 8.70433C4.97196 6.49956 7.81811 4 12 4C16.1819 4 19.028 6.49956 20.7251 8.70433C21.575 9.80853 22 10.3606 22 12C22 13.6394 21.575 14.1915 20.7251 15.2957C19.028 17.5004 16.1819 20 12 20C7.81811 20 4.97196 17.5004 3.27489 15.2957Z" stroke="currentColor" stroke-width="1.5"></path>
                                    <path d="M15 12C15 13.6569 13.6569 15 12 15C10.3431 15 9 13.6569 9 12C9 10.3431 10.3431 9 12 9C13.6569 9 15 10.3431 15 12Z" stroke="currentColor" stroke-width="1.5"></path>
                                </svg>
                            </a>
                            <button type="button" class="hover:text-danger delete-btn" data-id="${entity.id}" x-tooltip="Đưa vào thùng rác">
                                <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" class="w-5 h-5">
                                    <path d="M20.5001 6H3.5" stroke="currentColor" stroke-width="1.5" stroke-linecap="round"></path>
                                    <path d="M18.8334 8.5L18.3735 15.3991C18.1965 18.054 18.108 19.3815 17.243 20.1907C16.378 21 15.0476 21 12.3868 21H11.6134C8.9526 21 7.6222 21 6.75719 20.1907C5.89218 19.3815 5.80368 18.054 5.62669 15.3991L5.16675 8.5" stroke="currentColor" stroke-width="1.5" stroke-linecap="round"></path>
                                    <path opacity="0.5" d="M9.5 11L10 16" stroke="currentColor" stroke-width="1.5" stroke-linecap="round"></path>
                                    <path opacity="0.5" d="M14.5 11L14 16" stroke="currentColor" stroke-width="1.5" stroke-linecap="round"></path>
                                    <path opacity="0.5" d="M6.5 6C6.55588 6 6.58382 6 6.60915 5.99936C7.43259 5.97849 8.15902 5.45491 8.43922 4.68032C8.44784 4.65649 8.45667 4.62999 8.47434 4.57697L8.57143 4.28571C8.65431 4.03708 8.69575 3.91276 8.75071 3.8072C8.97001 3.38607 9.37574 3.09364 9.84461 3.01877C9.96213 3 10.0932 3 10.3553 3H13.6447C13.9068 3 14.0379 3 14.1554 3.01877C14.6243 3.09364 15.03 3.38607 15.2493 3.8072C15.3043 3.91276 15.3457 4.03708 15.4286 4.28571L15.5257 4.57697C15.5433 4.62992 15.5522 4.65651 15.5608 4.68032C15.841 5.45491 16.5674 5.97849 17.3909 5.99936C17.4162 6 17.4441 6 17.5 6" stroke="currentColor" stroke-width="1.5"></path>
                                </svg>
                            </button>                            
                        </div>`
                    ]);

                    this.datatable = new simpleDatatables.DataTable('#myTable', {
                        data: {
                            headings: [
                                '<input type="checkbox" class="form-checkbox" />',
                                'Mã đơn thuốc',
                                'Mã phiếu điều trị',
                                'Tên bệnh nhân',
                                'Ngày lập đơn thuốc',
                                'Tổng tiền',
                                'Thao tác'
                            ],
                            data: tableData
                        },
                        perPage: 10,
                        perPageSelect: [10, 20, 30, 50, 100],
                        firstLast: true,
                        searchable: false,
                        firstText: '<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" class="w-4.5 h-4.5 rtl:rotate-180"><path d="M13 19L7 12L13 5" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/><path opacity="0.5" d="M16.9998 19L10.9998 12L16.9998 5" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/></svg>',
                        lastText: '<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" class="w-4.5 h-4.5 rtl:rotate-180"><path d="M11 19L17 12L11 5" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/><path opacity="0.5" d="M6.99976 19L12.9998 12L6.99976 5" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/></svg>',
                        prevText: '<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" class="w-4.5 h-4.5 rtl:rotate-180"><path d="M15 5L9 12L15 19" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/></svg>',
                        nextText: '<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" class="w-4.5 h-4.5 rtl:rotate-180"><path d="M9 5L15 12L9 19" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/></svg>',
                        labels: {
                            perPage: "<span class='ml-2'>{select}</span>",
                            noRows: 'Không có dữ liệu'
                        },
                        layout: {
                            top: '{search}',
                            bottom: '{info}{select}{pager}'
                        },
                        columns: [
                            {
                                select: 0,
                                sortable: false,
                                render: (data, cell, row) => {
                                    return data;
                                }
                            },
                            {
                                select: 6,
                                sortable: false,
                                render: (data, cell, row) => {
                                    return data;
                                }
                            }
                        ],
                    });
                    // Gán lại sự kiện cho checkbox và delete-btn
                    this.rebindCheckboxEvents();
                    // Gán lại sự kiện khi chuyển trang
                    this.datatable.on('datatable.page', () => {
                        this.rebindCheckboxEvents();
                    });
                } catch (error) {
                    console.error('Lỗi khi khởi tạo bảng:', error);
                }

            },

            rebindCheckboxEvents() {
                // Gán lại sự kiện cho nút xóa
                document.querySelectorAll('.delete-btn').forEach(btn => {
                    btn.onclick = function () {
                        const id = this.getAttribute('data-id');
                        if (window.list && typeof window.list.delete === 'function') {
                            window.list.delete(id);
                        }
                    };
                });


                // Gán lại sự kiện cho nút chỉnh sửa
                document.querySelectorAll('.edit-prescription-btn').forEach(btn => {
                    btn.onclick = (e) => {
                        const id = btn.getAttribute('data-id');
                        document.getElementById('prescriptionModal').classList.remove('hidden', 'closing');
                        // Gọi API lấy chi tiết đơn thuốc
                        fetch(`/api/Prescriptions/${id}`)
                            .then(res => res.json())
                            .then(data => {
                                currentPrescriptionId = data.id;
                                // Fill thông tin vào modal
                                if (window.flatpickr && document.getElementById('prescriptionCreatedDate')._flatpickr) {
                                    document.getElementById('prescriptionCreatedDate')._flatpickr.setDate(data.prescriptionDate, true, "Y-m-dTH:i:s");
                                } else {
                                    document.getElementById('prescriptionCreatedDate').value = data.prescriptionDate
                                        ? new Date(data.prescriptionDate).toLocaleDateString('vi-VN')
                                        : '';
                                }
                                document.getElementById('prescriptionRecordCode').value = data.treatmentRecordCode || '';
                                document.getElementById('prescriptionRecordPatient').value = data.patientName || '';
                                document.getElementById('prescriptionNote').value = data.note || '';
                                // Fill danh sách thuốc
                                medicines = (data.details || []).map(d => ({
                                    medicineId: d.medicineId,
                                    name: d.medicineName,
                                    qty: d.quantity,
                                    price: d.unitPrice
                                }));
                                renderMedicines();
                            });
                    };
                });

                // Gán lại sự kiện cho checkbox "chọn tất cả"
                const checkAll = document.querySelector('#myTable thead input[type="checkbox"]');
                const rowCheckboxes = document.querySelectorAll('#myTable tbody input[type="checkbox"]');
                if (checkAll) {
                    checkAll.onclick = function () {
                        if (checkAll.checked) {
                            // Chỉ chọn các bản ghi đang hiển thị (filteredList)
                            window.list.selectedRows = window.list.filteredList.map(e => e.id.toString());
                        } else {
                            // Bỏ chọn tất cả các bản ghi đang hiển thị
                            window.list.selectedRows = window.list.selectedRows.filter(id =>
                                !window.list.filteredList.some(e => e.id.toString() === id)
                            );
                        }
                        // Cập nhật lại trạng thái checkbox trên trang hiện tại
                        rowCheckboxes.forEach(cb => {
                            cb.checked = checkAll.checked;
                        });
                    };
                }
                // Gán lại sự kiện cho từng checkbox dòng
                rowCheckboxes.forEach(cb => {
                    cb.checked = window.list.selectedRows.includes(cb.value);
                    cb.onclick = function () {
                        const id = cb.value;
                        if (cb.checked) {
                            if (!window.list.selectedRows.includes(id)) window.list.selectedRows.push(id);
                        } else {
                            window.list.selectedRows = window.list.selectedRows.filter(x => x !== id);
                            if (checkAll) checkAll.checked = false;
                        }
                    };
                });
            },

            deleteSelected() {
                if (this.selectedRows.length === 0) {
                    notyf.error('Vui lòng chọn ít nhất một đơn thuốc để xóa.');
                    return;
                }

                $.confirm({
                    title: 'Bạn có chắc chắn?',
                    content: 'Bạn có muốn xóa các đơn thuốc đã chọn không?',
                    icon: 'fa fa-question-circle text-blue-500',
                    theme: 'modern',
                    type: 'blue',
                    boxWidth: '400px',
                    useBootstrap: false,
                    buttons: {
                        confirm: {
                            text: 'Có, hãy thực hiện!',
                            btnClass: 'btn-success',
                            action: () => {
                                document.getElementById('selectedIds').value = this.selectedRows.join(',');
                                document.getElementById('myForm').action = '/don-thuoc/xoa';
                                document.getElementById('myForm').submit();
                            }
                        },
                        cancel: {
                            text: 'Hủy',
                            btnClass: 'btn-secondary'
                        }
                    }
                });
            },

            delete(id) {
                $.confirm({
                    title: 'Bạn có chắc chắn?',
                    content: 'Bạn có muốn xóa đơn thuốc này không?',
                    icon: 'fa fa-question-circle text-blue-500',
                    theme: 'modern',
                    type: 'blue',
                    boxWidth: '400px',
                    useBootstrap: false,
                    buttons: {
                        confirm: {
                            text: 'Có, hãy thực hiện!',
                            btnClass: 'btn-success',
                            action: () => {
                                document.getElementById('selectedIds').value = id;
                                document.getElementById('myForm').action = '/don-thuoc/xoa';
                                document.getElementById('myForm').submit();
                            }
                        },
                        cancel: {
                            text: 'Hủy',
                            btnClass: 'btn-secondary'
                        }
                    }
                });
            },

            updateTable() {
                if (this.datatable) {
                    this.datatable.destroy();
                    this.datatable = null;
                }
                this.initializeTable();
            }
        }));
    });

    document.getElementById('customSearchInput').addEventListener('input', function () {
        const keyword = removeVietnameseTones(this.value.trim().toLowerCase());
        if (!window.list) return;

        try {
            if (keyword === '') {
                window.list.filteredList = [...window.list.entityList];
            } else {
                window.list.filteredList = window.list.entityList.filter(e =>
                    (e.patientName && removeVietnameseTones(e.patientName).includes(keyword)) ||
                    (e.code && removeVietnameseTones(e.code).includes(keyword)) ||
                    (e.treatmentRecordCode && removeVietnameseTones(e.treatmentRecordCode).includes(keyword))
                );
            }
            window.list.updateTable();
        } catch (error) {
            console.error('Lỗi xử lý tìm kiếm:', error);
        }
    });

    $(document).ready(function () {
        if (window.flatpickr) {
            flatpickr("#filterDate", {
                dateFormat: "d/m/Y",
                allowInput: true,
            });
        }
        updateResetFilterButtonState();
        $('#filterDate').on('change', function () {
            updateResetFilterButtonState();
            if (!$(this).val()) {
                window.list.filteredList = window.list.entityList;
                if (window.list.datatable) window.list.datatable.destroy();
                window.list.initializeTable();
            }
        });
    });

    // Khởi tạo Choices.js cho 4 select sau khi đổ option
    $(document).ready(function () {
        if (window.flatpickr) {
            flatpickr("#filterDate", {
                dateFormat: "d/m/Y",
                allowInput: true,
            });
        }
        updateResetFilterButtonState();

        // Xử lý sự kiện change cho các select
        $('#filterDate').on('change', function () {
            updateResetFilterButtonState();

            // Kiểm tra nếu tất cả các select đều có giá trị mặc định
            const dateValue = $('#filterDate').val();

            if (!dateValue || dateValue === "") {
                // Reset về danh sách ban đầu
                window.list.filteredList = [...window.list.entityList];
                if (window.list.datatable) {
                    window.list.datatable.destroy();
                    window.list.datatable = null;
                }
                window.list.initializeTable();
            }
        });
    });

    // Nút Lọc
    $(document).on('click', '#btnFilter', function () {
        const dateStr = $('#filterDate').val();
        let date = dateStr;
        if (date && date.includes('/')) {
            const [day, month, year] = date.split('/');
            date = `${year}-${month}-${day}`;
        }

        if (!date) {
            notyf.error('Vui lòng chọn ngày lập đơn thuốc để lọc!');
            return;
        }

        try {
            let filtered = [...window.list.entityList];

            if (date) {
                filtered = filtered.filter(e => {
                    if (!e.prescriptionDate) return false;
                    const onlyDate = e.prescriptionDate.split('T')[0];
                    return onlyDate === date;
                });
            }

            // Update filteredList and reinitialize table
            window.list.filteredList = filtered;

            // Destroy existing table if it exists
            if (window.list.datatable) {
                window.list.datatable.destroy();
                window.list.datatable = null;
            }

            // Initialize new table with filtered data
            window.list.initializeTable();

            // Show appropriate message
            if (filtered.length > 0) {
                notyf.success('Lọc thành công!');
            } else {
                notyf.error('Không tìm thấy kết quả phù hợp!');
            }
        } catch (error) {
            console.error('Error in filterList:', error);
            notyf.error('Đã xảy ra lỗi khi lọc dữ liệu!');
        }
    });

    // Nút Hủy lọc
    $(document).on('click', '#btnResetFilter', function () {

        $('#filterDate').val('');

        // Reset search input
        $('#customSearchInput').val('');

        // Reset filtered list to original data
        window.list.filteredList = [...window.list.entityList];

        // Destroy existing table if it exists
        if (window.list.datatable) {
            window.list.datatable.destroy();
            window.list.datatable = null;
        }

        // Reinitialize table with original data
        window.list.initializeTable();

        // Update reset button state
        updateResetFilterButtonState();

        // Show success message
        notyf.success('Đã hủy bộ lọc thành công!');
    });

    function updateResetFilterButtonState() {
        const date = $('#filterDate').val();
        if (!date) {
            $('#btnResetFilter').prop('disabled', true).css('cursor', 'not-allowed');
        } else {
            $('#btnResetFilter').prop('disabled', false).css('cursor', 'pointer');
        }
    }


    document.getElementById('closePrescriptionModal').addEventListener('click', function () {
        const modal = document.getElementById('prescriptionModal');
        modal.classList.add('closing');
        setTimeout(function () {
            modal.classList.add('hidden');
            modal.classList.remove('closing');
            window.location.reload();
        }, 200);
    });

    let medicines = [];

    const medicineList = @Html.Raw(Json.Serialize(ViewBag.Medicines ?? new List<object>()));

    function renderMedicines() {
        const tbody = document.getElementById('prescriptionItemsBody');
        tbody.innerHTML = medicines.length === 0
            ? `<tr><td colspan="5" class="text-center">Chưa thêm thuốc nào</td></tr>`
            : medicines.map((med, idx) => {
                // Lấy danh sách id thuốc đã chọn ở các dòng khác
                const selectedIds = medicines
                    .filter((m, i) => i !== idx)
                    .map(m => m.medicineId);

                let options = `<option value="">Chọn thuốc</option>`;
                medicineList.forEach(m => {
                    // Nếu thuốc này đã được chọn ở dòng khác thì không render option
                    if (selectedIds.includes(m.id)) return;
                    options += `<option value="${m.id}" data-price="${m.price}" ${med.medicineId == m.id ? 'selected' : ''}>${m.name}</option>`;
                });
                return `
                    <tr>
                        <td>
                            <select class="form-select w-full max-w-xs" data-idx="${idx}" onchange="updateMedicineSelect(${idx}, this)">
                                ${options}
                            </select>
                        </td>
                        <td><input type="number" class="form-input w-full" style="max-width:100px; text-align: center;" value="${med.qty || ''}" min="1" onchange="updateMedicine(${idx}, 'qty', this.value)"></td>
                        <td>
                          <input type="text" class="form-input w-full" style="max-width:150px; text-align: center;" 
                            value="${med.price ? Number(med.price).toLocaleString('vi-VN') + ' VNĐ' : ''}" readonly>
                        </td>
                        <td>${(med.qty && med.price) ? (med.qty * med.price).toLocaleString() + ' VNĐ' : '0 VNĐ'}</td>
                        <td>
                            <button type="button" onclick="removeMedicine(${idx})">
                                <svg width="20" height="20" fill="none" stroke="currentColor" stroke-width="1.5"><line x1="18" y1="6" x2="6" y2="18"/><line x1="6" y1="6" x2="18" y2="18"/></svg>
                            </button>
                        </td>
                    </tr>
                `;
            }).join('');

        // Cập nhật tổng tiền
        document.getElementById('prescriptionTotal').innerText =
            medicines.reduce((sum, m) => sum + (Number(m.qty) * Number(m.price) || 0), 0).toLocaleString() + ' VNĐ';
    }

    function updateMedicine(idx, key, value) {
        medicines[idx][key] = value;
        renderMedicines();
    }

    function removeMedicine(idx) {
        medicines.splice(idx, 1);
        renderMedicines();
    }

    function updateMedicineSelect(idx, select) {
        const medicineId = select.value;
        const selected = medicineList.find(m => m.id == medicineId);
        medicines[idx].medicineId = medicineId;
        medicines[idx].name = selected ? selected.name : '';
        medicines[idx].price = selected ? selected.price : 0;
        renderMedicines();
    }

    document.getElementById('btnAddMedicine').onclick = function () {
        medicines.push({ name: '', desc: '', qty: 1, price: 0 });
        renderMedicines();
    };

    document.querySelector('#prescriptionModal .btn-save').addEventListener('click', async function () {
        // Lấy dữ liệu
        const prescriptionDate = document.getElementById('prescriptionCreatedDate').value;
        const note = document.getElementById('prescriptionNote').value;
        const treatmentRecordCode = document.getElementById('prescriptionRecordCode').value;
        let treatmentRecordId = null;
        if (window.list && window.list.entityList) {
            const found = window.list.entityList.find(e => e.treatmentRecordCode === treatmentRecordCode);
            if (found) treatmentRecordId = found.treatmentRecordId;
        }
        if (!treatmentRecordId) {
            notyf.error('Không xác định được phiếu điều trị!');
            return;
        }
        // Validate thuốc
        if (!medicines.length) {
            notyf.error('Vui lòng thêm ít nhất một thuốc!');
            return;
        }
        // Validate chi tiết từng dòng thuốc
        const invalidMedicine = medicines.some(m =>
            !m.medicineId || Number(m.qty) <= 0 || Number(m.price) <= 0
        );
        if (invalidMedicine) {
            notyf.error('Kiểm tra lại thông tin nhập');
            return;
        }
        // Chuẩn bị dữ liệu thuốc
        const details = medicines
            .filter(m => m.medicineId && Number(m.qty) > 0 && Number(m.price) > 0)
            .map(m => ({
                medicineId: m.medicineId,
                quantity: Number(m.qty),
                unitPrice: Number(m.price),
                note: m.note || ''
            }));
        // Chuẩn bị dữ liệu đơn thuốc
        const data = {
            code: '', // để backend tự sinh
            prescriptionDate: (() => {
                if (!prescriptionDate) return new Date().toISOString().slice(0, 10);
                const parts = prescriptionDate.split('/');
                if (parts.length === 3) {
                    // dd/MM/yyyy
                    return `${parts[2]}-${parts[1].padStart(2, '0')}-${parts[0].padStart(2, '0')}`;
                }
                return new Date().toISOString().slice(0, 10);
            })(),
            note: note,
            treatmentRecordId: treatmentRecordId,
            details: details
        };
        // Gọi API
        try {
            const res = await fetch(`/api/Prescriptions/${currentPrescriptionId}`, {
                method: 'PUT',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(data)
            });
            const result = await res.json();
            if (res.ok && result.success) {
                notyf.success(result.message || 'Chỉnh sửa đơn thuốc thành công!');
                // Đóng modal sau 2 giây
                setTimeout(() => {
                    document.getElementById('closePrescriptionModal').click();
                }, 2000);
            } else {
                notyf.error(result.message || 'Chỉnh sửa đơn thuốc thất bại!');
            }
        } catch (err) {
            notyf.error('Lỗi kết nối API!');
        }
    });
</script>

@if (TempData["SuccessMessage"] != null)
{
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            notyf.success('@Html.Raw(TempData["SuccessMessage"])');
        });
    </script>
}
@if (TempData["ErrorMessage"] != null)
{
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            notyf.error('@Html.Raw(TempData["ErrorMessage"])');
        });
    </script>
}

<style>
    .modal-content-animate {
        animation: modalFadeIn 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    }

    #prescriptionModal.closing .modal-content-animate {
        animation: modalFadeOut 0.2s cubic-bezier(0.4, 0, 0.2, 1);
    }

    @@keyframes modalFadeIn {
        from {
            opacity: 0;
            transform: scale(0.95);
        }

        to {
            opacity: 1;
            transform: scale(1);
        }
    }

    @@keyframes modalFadeOut {
        from {
            opacity: 1;
            transform: scale(1);
        }

        to {
            opacity: 0;
            transform: scale(0.95);
        }
    }

    #prescriptionModal {
        background: rgba(30, 41, 59, 0.2);
        backdrop-filter: blur(6px);
        -webkit-backdrop-filter: blur(6px);
    }

    .bg-modal-blur {
        background: rgba(30, 41, 59, 0.2);
        backdrop-filter: blur(6px);
        -webkit-backdrop-filter: blur(6px);
    }
</style>